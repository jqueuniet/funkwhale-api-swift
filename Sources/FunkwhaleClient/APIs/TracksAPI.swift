//
// TracksAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

extension FunkwhaleClientAPI {


open class TracksAPI {

    /**

     - parameter id: (path) A unique integer value identifying this track. 
     - parameter trackRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func createTrackFetch(id: Int, trackRequest: TrackRequest, apiResponseQueue: DispatchQueue = FunkwhaleClientAPI.apiResponseQueue, completion: @escaping ((_ data: Fetch?, _ error: Error?) -> Void)) -> RequestTask {
        return createTrackFetchWithRequestBuilder(id: id, trackRequest: trackRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /api/v1/tracks/{id}/fetches/
     - A simple ViewSet for viewing and editing accounts.
     - BASIC:
       - type: http
       - name: ApplicationToken
     - OAuth:
       - type: oauth2
       - name: oauth2
     - parameter id: (path) A unique integer value identifying this track. 
     - parameter trackRequest: (body)  
     - returns: RequestBuilder<Fetch> 
     */
    open class func createTrackFetchWithRequestBuilder(id: Int, trackRequest: TrackRequest) -> RequestBuilder<Fetch> {
        var localVariablePath = "/api/v1/tracks/{id}/fetches/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = FunkwhaleClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: trackRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Fetch>.Type = FunkwhaleClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this track. 
     - parameter trackRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func createTrackMutation(id: Int, trackRequest: TrackRequest, apiResponseQueue: DispatchQueue = FunkwhaleClientAPI.apiResponseQueue, completion: @escaping ((_ data: APIMutation?, _ error: Error?) -> Void)) -> RequestTask {
        return createTrackMutationWithRequestBuilder(id: id, trackRequest: trackRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /api/v1/tracks/{id}/mutations/
     - A simple ViewSet for viewing and editing accounts.
     - BASIC:
       - type: http
       - name: ApplicationToken
     - OAuth:
       - type: oauth2
       - name: oauth2
     - parameter id: (path) A unique integer value identifying this track. 
     - parameter trackRequest: (body)  
     - returns: RequestBuilder<APIMutation> 
     */
    open class func createTrackMutationWithRequestBuilder(id: Int, trackRequest: TrackRequest) -> RequestBuilder<APIMutation> {
        var localVariablePath = "/api/v1/tracks/{id}/mutations/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = FunkwhaleClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: trackRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<APIMutation>.Type = FunkwhaleClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this track. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func deleteTrack(id: Int, apiResponseQueue: DispatchQueue = FunkwhaleClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return deleteTrackWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /api/v1/tracks/{id}/
     - A simple ViewSet for viewing and editing accounts.
     - BASIC:
       - type: http
       - name: ApplicationToken
     - OAuth:
       - type: oauth2
       - name: oauth2
     - parameter id: (path) A unique integer value identifying this track. 
     - returns: RequestBuilder<Void> 
     */
    open class func deleteTrackWithRequestBuilder(id: Int) -> RequestBuilder<Void> {
        var localVariablePath = "/api/v1/tracks/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = FunkwhaleClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = FunkwhaleClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this track. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getTrack(id: Int, apiResponseQueue: DispatchQueue = FunkwhaleClientAPI.apiResponseQueue, completion: @escaping ((_ data: Track?, _ error: Error?) -> Void)) -> RequestTask {
        return getTrackWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v1/tracks/{id}/
     - A simple ViewSet for viewing and editing accounts.
     - BASIC:
       - type: http
       - name: ApplicationToken
     - OAuth:
       - type: oauth2
       - name: oauth2
     - parameter id: (path) A unique integer value identifying this track. 
     - returns: RequestBuilder<Track> 
     */
    open class func getTrackWithRequestBuilder(id: Int) -> RequestBuilder<Track> {
        var localVariablePath = "/api/v1/tracks/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = FunkwhaleClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Track>.Type = FunkwhaleClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter ordering
     */
    public enum Ordering_getTrackFetches: String, CaseIterable {
        case albumReleaseDateDesc = "-album__release_date"
        case albumTitleDesc = "-album__title"
        case artistModificationDateDesc = "-artist__modification_date"
        case artistNameDesc = "-artist__name"
        case creationDateDesc = "-creation_date"
        case discNumberDesc = "-disc_number"
        case positionDesc = "-position"
        case randomDesc = "-random"
        case relatedDesc = "-related"
        case sizeDesc = "-size"
        case titleDesc = "-title"
        case albumReleaseDate = "album__release_date"
        case albumTitle = "album__title"
        case artistModificationDate = "artist__modification_date"
        case artistName = "artist__name"
        case creationDate = "creation_date"
        case discNumber = "disc_number"
        case position = "position"
        case random = "random"
        case related = "related"
        case size = "size"
        case title = "title"
    }

    /**

     - parameter id: (path) A unique integer value identifying this track. 
     - parameter album: (query)  (optional)
     - parameter artist: (query)  (optional)
     - parameter channel: (query)  (optional)
     - parameter hidden: (query)  (optional)
     - parameter includeChannels: (query)  (optional)
     - parameter library: (query)  (optional)
     - parameter license: (query)  (optional)
     - parameter mbid: (query)  (optional)
     - parameter ordering: (query) Ordering (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter playable: (query)  (optional)
     - parameter q: (query)  (optional)
     - parameter related: (query)  (optional)
     - parameter scope: (query)  (optional)
     - parameter tag: (query)  (optional)
     - parameter title: (query)  (optional)
     - parameter titleIcontains: (query)  (optional)
     - parameter titleIexact: (query)  (optional)
     - parameter titleStartswith: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getTrackFetches(id: Int, album: Int? = nil, artist: String? = nil, channel: String? = nil, hidden: Bool? = nil, includeChannels: Bool? = nil, library: String? = nil, license: String? = nil, mbid: UUID? = nil, ordering: [Ordering_getTrackFetches]? = nil, page: Int? = nil, pageSize: Int? = nil, playable: Bool? = nil, q: String? = nil, related: String? = nil, scope: String? = nil, tag: [String]? = nil, title: String? = nil, titleIcontains: String? = nil, titleIexact: String? = nil, titleStartswith: String? = nil, apiResponseQueue: DispatchQueue = FunkwhaleClientAPI.apiResponseQueue, completion: @escaping ((_ data: PaginatedFetchList?, _ error: Error?) -> Void)) -> RequestTask {
        return getTrackFetchesWithRequestBuilder(id: id, album: album, artist: artist, channel: channel, hidden: hidden, includeChannels: includeChannels, library: library, license: license, mbid: mbid, ordering: ordering, page: page, pageSize: pageSize, playable: playable, q: q, related: related, scope: scope, tag: tag, title: title, titleIcontains: titleIcontains, titleIexact: titleIexact, titleStartswith: titleStartswith).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v1/tracks/{id}/fetches/
     - A simple ViewSet for viewing and editing accounts.
     - BASIC:
       - type: http
       - name: ApplicationToken
     - OAuth:
       - type: oauth2
       - name: oauth2
     - parameter id: (path) A unique integer value identifying this track. 
     - parameter album: (query)  (optional)
     - parameter artist: (query)  (optional)
     - parameter channel: (query)  (optional)
     - parameter hidden: (query)  (optional)
     - parameter includeChannels: (query)  (optional)
     - parameter library: (query)  (optional)
     - parameter license: (query)  (optional)
     - parameter mbid: (query)  (optional)
     - parameter ordering: (query) Ordering (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter playable: (query)  (optional)
     - parameter q: (query)  (optional)
     - parameter related: (query)  (optional)
     - parameter scope: (query)  (optional)
     - parameter tag: (query)  (optional)
     - parameter title: (query)  (optional)
     - parameter titleIcontains: (query)  (optional)
     - parameter titleIexact: (query)  (optional)
     - parameter titleStartswith: (query)  (optional)
     - returns: RequestBuilder<PaginatedFetchList> 
     */
    open class func getTrackFetchesWithRequestBuilder(id: Int, album: Int? = nil, artist: String? = nil, channel: String? = nil, hidden: Bool? = nil, includeChannels: Bool? = nil, library: String? = nil, license: String? = nil, mbid: UUID? = nil, ordering: [Ordering_getTrackFetches]? = nil, page: Int? = nil, pageSize: Int? = nil, playable: Bool? = nil, q: String? = nil, related: String? = nil, scope: String? = nil, tag: [String]? = nil, title: String? = nil, titleIcontains: String? = nil, titleIexact: String? = nil, titleStartswith: String? = nil) -> RequestBuilder<PaginatedFetchList> {
        var localVariablePath = "/api/v1/tracks/{id}/fetches/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = FunkwhaleClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "album": (wrappedValue: album?.encodeToJSON(), isExplode: true),
            "artist": (wrappedValue: artist?.encodeToJSON(), isExplode: true),
            "channel": (wrappedValue: channel?.encodeToJSON(), isExplode: true),
            "hidden": (wrappedValue: hidden?.encodeToJSON(), isExplode: true),
            "include_channels": (wrappedValue: includeChannels?.encodeToJSON(), isExplode: true),
            "library": (wrappedValue: library?.encodeToJSON(), isExplode: true),
            "license": (wrappedValue: license?.encodeToJSON(), isExplode: true),
            "mbid": (wrappedValue: mbid?.encodeToJSON(), isExplode: true),
            "ordering": (wrappedValue: ordering?.encodeToJSON(), isExplode: false),
            "page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
            "page_size": (wrappedValue: pageSize?.encodeToJSON(), isExplode: true),
            "playable": (wrappedValue: playable?.encodeToJSON(), isExplode: true),
            "q": (wrappedValue: q?.encodeToJSON(), isExplode: true),
            "related": (wrappedValue: related?.encodeToJSON(), isExplode: true),
            "scope": (wrappedValue: scope?.encodeToJSON(), isExplode: true),
            "tag": (wrappedValue: tag?.encodeToJSON(), isExplode: true),
            "title": (wrappedValue: title?.encodeToJSON(), isExplode: true),
            "title__icontains": (wrappedValue: titleIcontains?.encodeToJSON(), isExplode: true),
            "title__iexact": (wrappedValue: titleIexact?.encodeToJSON(), isExplode: true),
            "title__startswith": (wrappedValue: titleStartswith?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedFetchList>.Type = FunkwhaleClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter ordering
     */
    public enum Ordering_getTrackLibraries: String, CaseIterable {
        case albumReleaseDateDesc = "-album__release_date"
        case albumTitleDesc = "-album__title"
        case artistModificationDateDesc = "-artist__modification_date"
        case artistNameDesc = "-artist__name"
        case creationDateDesc = "-creation_date"
        case discNumberDesc = "-disc_number"
        case positionDesc = "-position"
        case randomDesc = "-random"
        case relatedDesc = "-related"
        case sizeDesc = "-size"
        case titleDesc = "-title"
        case albumReleaseDate = "album__release_date"
        case albumTitle = "album__title"
        case artistModificationDate = "artist__modification_date"
        case artistName = "artist__name"
        case creationDate = "creation_date"
        case discNumber = "disc_number"
        case position = "position"
        case random = "random"
        case related = "related"
        case size = "size"
        case title = "title"
    }

    /**

     - parameter id: (path) A unique integer value identifying this track. 
     - parameter album: (query)  (optional)
     - parameter artist: (query)  (optional)
     - parameter channel: (query)  (optional)
     - parameter hidden: (query)  (optional)
     - parameter includeChannels: (query)  (optional)
     - parameter library: (query)  (optional)
     - parameter license: (query)  (optional)
     - parameter mbid: (query)  (optional)
     - parameter ordering: (query) Ordering (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter playable: (query)  (optional)
     - parameter q: (query)  (optional)
     - parameter related: (query)  (optional)
     - parameter scope: (query)  (optional)
     - parameter tag: (query)  (optional)
     - parameter title: (query)  (optional)
     - parameter titleIcontains: (query)  (optional)
     - parameter titleIexact: (query)  (optional)
     - parameter titleStartswith: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getTrackLibraries(id: Int, album: Int? = nil, artist: String? = nil, channel: String? = nil, hidden: Bool? = nil, includeChannels: Bool? = nil, library: String? = nil, license: String? = nil, mbid: UUID? = nil, ordering: [Ordering_getTrackLibraries]? = nil, page: Int? = nil, pageSize: Int? = nil, playable: Bool? = nil, q: String? = nil, related: String? = nil, scope: String? = nil, tag: [String]? = nil, title: String? = nil, titleIcontains: String? = nil, titleIexact: String? = nil, titleStartswith: String? = nil, apiResponseQueue: DispatchQueue = FunkwhaleClientAPI.apiResponseQueue, completion: @escaping ((_ data: PaginatedLibraryList?, _ error: Error?) -> Void)) -> RequestTask {
        return getTrackLibrariesWithRequestBuilder(id: id, album: album, artist: artist, channel: channel, hidden: hidden, includeChannels: includeChannels, library: library, license: license, mbid: mbid, ordering: ordering, page: page, pageSize: pageSize, playable: playable, q: q, related: related, scope: scope, tag: tag, title: title, titleIcontains: titleIcontains, titleIexact: titleIexact, titleStartswith: titleStartswith).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v1/tracks/{id}/libraries/
     - A simple ViewSet for viewing and editing accounts.
     - BASIC:
       - type: http
       - name: ApplicationToken
     - OAuth:
       - type: oauth2
       - name: oauth2
     - parameter id: (path) A unique integer value identifying this track. 
     - parameter album: (query)  (optional)
     - parameter artist: (query)  (optional)
     - parameter channel: (query)  (optional)
     - parameter hidden: (query)  (optional)
     - parameter includeChannels: (query)  (optional)
     - parameter library: (query)  (optional)
     - parameter license: (query)  (optional)
     - parameter mbid: (query)  (optional)
     - parameter ordering: (query) Ordering (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter playable: (query)  (optional)
     - parameter q: (query)  (optional)
     - parameter related: (query)  (optional)
     - parameter scope: (query)  (optional)
     - parameter tag: (query)  (optional)
     - parameter title: (query)  (optional)
     - parameter titleIcontains: (query)  (optional)
     - parameter titleIexact: (query)  (optional)
     - parameter titleStartswith: (query)  (optional)
     - returns: RequestBuilder<PaginatedLibraryList> 
     */
    open class func getTrackLibrariesWithRequestBuilder(id: Int, album: Int? = nil, artist: String? = nil, channel: String? = nil, hidden: Bool? = nil, includeChannels: Bool? = nil, library: String? = nil, license: String? = nil, mbid: UUID? = nil, ordering: [Ordering_getTrackLibraries]? = nil, page: Int? = nil, pageSize: Int? = nil, playable: Bool? = nil, q: String? = nil, related: String? = nil, scope: String? = nil, tag: [String]? = nil, title: String? = nil, titleIcontains: String? = nil, titleIexact: String? = nil, titleStartswith: String? = nil) -> RequestBuilder<PaginatedLibraryList> {
        var localVariablePath = "/api/v1/tracks/{id}/libraries/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = FunkwhaleClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "album": (wrappedValue: album?.encodeToJSON(), isExplode: true),
            "artist": (wrappedValue: artist?.encodeToJSON(), isExplode: true),
            "channel": (wrappedValue: channel?.encodeToJSON(), isExplode: true),
            "hidden": (wrappedValue: hidden?.encodeToJSON(), isExplode: true),
            "include_channels": (wrappedValue: includeChannels?.encodeToJSON(), isExplode: true),
            "library": (wrappedValue: library?.encodeToJSON(), isExplode: true),
            "license": (wrappedValue: license?.encodeToJSON(), isExplode: true),
            "mbid": (wrappedValue: mbid?.encodeToJSON(), isExplode: true),
            "ordering": (wrappedValue: ordering?.encodeToJSON(), isExplode: false),
            "page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
            "page_size": (wrappedValue: pageSize?.encodeToJSON(), isExplode: true),
            "playable": (wrappedValue: playable?.encodeToJSON(), isExplode: true),
            "q": (wrappedValue: q?.encodeToJSON(), isExplode: true),
            "related": (wrappedValue: related?.encodeToJSON(), isExplode: true),
            "scope": (wrappedValue: scope?.encodeToJSON(), isExplode: true),
            "tag": (wrappedValue: tag?.encodeToJSON(), isExplode: true),
            "title": (wrappedValue: title?.encodeToJSON(), isExplode: true),
            "title__icontains": (wrappedValue: titleIcontains?.encodeToJSON(), isExplode: true),
            "title__iexact": (wrappedValue: titleIexact?.encodeToJSON(), isExplode: true),
            "title__startswith": (wrappedValue: titleStartswith?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedLibraryList>.Type = FunkwhaleClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter ordering
     */
    public enum Ordering_getTrackMutations: String, CaseIterable {
        case albumReleaseDateDesc = "-album__release_date"
        case albumTitleDesc = "-album__title"
        case artistModificationDateDesc = "-artist__modification_date"
        case artistNameDesc = "-artist__name"
        case creationDateDesc = "-creation_date"
        case discNumberDesc = "-disc_number"
        case positionDesc = "-position"
        case randomDesc = "-random"
        case relatedDesc = "-related"
        case sizeDesc = "-size"
        case titleDesc = "-title"
        case albumReleaseDate = "album__release_date"
        case albumTitle = "album__title"
        case artistModificationDate = "artist__modification_date"
        case artistName = "artist__name"
        case creationDate = "creation_date"
        case discNumber = "disc_number"
        case position = "position"
        case random = "random"
        case related = "related"
        case size = "size"
        case title = "title"
    }

    /**

     - parameter id: (path) A unique integer value identifying this track. 
     - parameter album: (query)  (optional)
     - parameter artist: (query)  (optional)
     - parameter channel: (query)  (optional)
     - parameter hidden: (query)  (optional)
     - parameter includeChannels: (query)  (optional)
     - parameter library: (query)  (optional)
     - parameter license: (query)  (optional)
     - parameter mbid: (query)  (optional)
     - parameter ordering: (query) Ordering (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter playable: (query)  (optional)
     - parameter q: (query)  (optional)
     - parameter related: (query)  (optional)
     - parameter scope: (query)  (optional)
     - parameter tag: (query)  (optional)
     - parameter title: (query)  (optional)
     - parameter titleIcontains: (query)  (optional)
     - parameter titleIexact: (query)  (optional)
     - parameter titleStartswith: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getTrackMutations(id: Int, album: Int? = nil, artist: String? = nil, channel: String? = nil, hidden: Bool? = nil, includeChannels: Bool? = nil, library: String? = nil, license: String? = nil, mbid: UUID? = nil, ordering: [Ordering_getTrackMutations]? = nil, page: Int? = nil, pageSize: Int? = nil, playable: Bool? = nil, q: String? = nil, related: String? = nil, scope: String? = nil, tag: [String]? = nil, title: String? = nil, titleIcontains: String? = nil, titleIexact: String? = nil, titleStartswith: String? = nil, apiResponseQueue: DispatchQueue = FunkwhaleClientAPI.apiResponseQueue, completion: @escaping ((_ data: PaginatedAPIMutationList?, _ error: Error?) -> Void)) -> RequestTask {
        return getTrackMutationsWithRequestBuilder(id: id, album: album, artist: artist, channel: channel, hidden: hidden, includeChannels: includeChannels, library: library, license: license, mbid: mbid, ordering: ordering, page: page, pageSize: pageSize, playable: playable, q: q, related: related, scope: scope, tag: tag, title: title, titleIcontains: titleIcontains, titleIexact: titleIexact, titleStartswith: titleStartswith).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v1/tracks/{id}/mutations/
     - A simple ViewSet for viewing and editing accounts.
     - BASIC:
       - type: http
       - name: ApplicationToken
     - OAuth:
       - type: oauth2
       - name: oauth2
     - parameter id: (path) A unique integer value identifying this track. 
     - parameter album: (query)  (optional)
     - parameter artist: (query)  (optional)
     - parameter channel: (query)  (optional)
     - parameter hidden: (query)  (optional)
     - parameter includeChannels: (query)  (optional)
     - parameter library: (query)  (optional)
     - parameter license: (query)  (optional)
     - parameter mbid: (query)  (optional)
     - parameter ordering: (query) Ordering (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter playable: (query)  (optional)
     - parameter q: (query)  (optional)
     - parameter related: (query)  (optional)
     - parameter scope: (query)  (optional)
     - parameter tag: (query)  (optional)
     - parameter title: (query)  (optional)
     - parameter titleIcontains: (query)  (optional)
     - parameter titleIexact: (query)  (optional)
     - parameter titleStartswith: (query)  (optional)
     - returns: RequestBuilder<PaginatedAPIMutationList> 
     */
    open class func getTrackMutationsWithRequestBuilder(id: Int, album: Int? = nil, artist: String? = nil, channel: String? = nil, hidden: Bool? = nil, includeChannels: Bool? = nil, library: String? = nil, license: String? = nil, mbid: UUID? = nil, ordering: [Ordering_getTrackMutations]? = nil, page: Int? = nil, pageSize: Int? = nil, playable: Bool? = nil, q: String? = nil, related: String? = nil, scope: String? = nil, tag: [String]? = nil, title: String? = nil, titleIcontains: String? = nil, titleIexact: String? = nil, titleStartswith: String? = nil) -> RequestBuilder<PaginatedAPIMutationList> {
        var localVariablePath = "/api/v1/tracks/{id}/mutations/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = FunkwhaleClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "album": (wrappedValue: album?.encodeToJSON(), isExplode: true),
            "artist": (wrappedValue: artist?.encodeToJSON(), isExplode: true),
            "channel": (wrappedValue: channel?.encodeToJSON(), isExplode: true),
            "hidden": (wrappedValue: hidden?.encodeToJSON(), isExplode: true),
            "include_channels": (wrappedValue: includeChannels?.encodeToJSON(), isExplode: true),
            "library": (wrappedValue: library?.encodeToJSON(), isExplode: true),
            "license": (wrappedValue: license?.encodeToJSON(), isExplode: true),
            "mbid": (wrappedValue: mbid?.encodeToJSON(), isExplode: true),
            "ordering": (wrappedValue: ordering?.encodeToJSON(), isExplode: false),
            "page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
            "page_size": (wrappedValue: pageSize?.encodeToJSON(), isExplode: true),
            "playable": (wrappedValue: playable?.encodeToJSON(), isExplode: true),
            "q": (wrappedValue: q?.encodeToJSON(), isExplode: true),
            "related": (wrappedValue: related?.encodeToJSON(), isExplode: true),
            "scope": (wrappedValue: scope?.encodeToJSON(), isExplode: true),
            "tag": (wrappedValue: tag?.encodeToJSON(), isExplode: true),
            "title": (wrappedValue: title?.encodeToJSON(), isExplode: true),
            "title__icontains": (wrappedValue: titleIcontains?.encodeToJSON(), isExplode: true),
            "title__iexact": (wrappedValue: titleIexact?.encodeToJSON(), isExplode: true),
            "title__startswith": (wrappedValue: titleStartswith?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedAPIMutationList>.Type = FunkwhaleClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter ordering
     */
    public enum Ordering_getTracks: String, CaseIterable {
        case albumReleaseDateDesc = "-album__release_date"
        case albumTitleDesc = "-album__title"
        case artistModificationDateDesc = "-artist__modification_date"
        case artistNameDesc = "-artist__name"
        case creationDateDesc = "-creation_date"
        case discNumberDesc = "-disc_number"
        case positionDesc = "-position"
        case randomDesc = "-random"
        case relatedDesc = "-related"
        case sizeDesc = "-size"
        case titleDesc = "-title"
        case albumReleaseDate = "album__release_date"
        case albumTitle = "album__title"
        case artistModificationDate = "artist__modification_date"
        case artistName = "artist__name"
        case creationDate = "creation_date"
        case discNumber = "disc_number"
        case position = "position"
        case random = "random"
        case related = "related"
        case size = "size"
        case title = "title"
    }

    /**

     - parameter album: (query)  (optional)
     - parameter artist: (query)  (optional)
     - parameter channel: (query)  (optional)
     - parameter hidden: (query)  (optional)
     - parameter id: (query)  (optional)
     - parameter includeChannels: (query)  (optional)
     - parameter library: (query)  (optional)
     - parameter license: (query)  (optional)
     - parameter mbid: (query)  (optional)
     - parameter ordering: (query) Ordering (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter playable: (query)  (optional)
     - parameter q: (query)  (optional)
     - parameter related: (query)  (optional)
     - parameter scope: (query)  (optional)
     - parameter tag: (query)  (optional)
     - parameter title: (query)  (optional)
     - parameter titleIcontains: (query)  (optional)
     - parameter titleIexact: (query)  (optional)
     - parameter titleStartswith: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getTracks(album: Int? = nil, artist: String? = nil, channel: String? = nil, hidden: Bool? = nil, id: [Int]? = nil, includeChannels: Bool? = nil, library: String? = nil, license: String? = nil, mbid: UUID? = nil, ordering: [Ordering_getTracks]? = nil, page: Int? = nil, pageSize: Int? = nil, playable: Bool? = nil, q: String? = nil, related: String? = nil, scope: String? = nil, tag: [String]? = nil, title: String? = nil, titleIcontains: String? = nil, titleIexact: String? = nil, titleStartswith: String? = nil, apiResponseQueue: DispatchQueue = FunkwhaleClientAPI.apiResponseQueue, completion: @escaping ((_ data: PaginatedTrackList?, _ error: Error?) -> Void)) -> RequestTask {
        return getTracksWithRequestBuilder(album: album, artist: artist, channel: channel, hidden: hidden, id: id, includeChannels: includeChannels, library: library, license: license, mbid: mbid, ordering: ordering, page: page, pageSize: pageSize, playable: playable, q: q, related: related, scope: scope, tag: tag, title: title, titleIcontains: titleIcontains, titleIexact: titleIexact, titleStartswith: titleStartswith).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v1/tracks/
     - A simple ViewSet for viewing and editing accounts.
     - BASIC:
       - type: http
       - name: ApplicationToken
     - OAuth:
       - type: oauth2
       - name: oauth2
     - parameter album: (query)  (optional)
     - parameter artist: (query)  (optional)
     - parameter channel: (query)  (optional)
     - parameter hidden: (query)  (optional)
     - parameter id: (query)  (optional)
     - parameter includeChannels: (query)  (optional)
     - parameter library: (query)  (optional)
     - parameter license: (query)  (optional)
     - parameter mbid: (query)  (optional)
     - parameter ordering: (query) Ordering (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter playable: (query)  (optional)
     - parameter q: (query)  (optional)
     - parameter related: (query)  (optional)
     - parameter scope: (query)  (optional)
     - parameter tag: (query)  (optional)
     - parameter title: (query)  (optional)
     - parameter titleIcontains: (query)  (optional)
     - parameter titleIexact: (query)  (optional)
     - parameter titleStartswith: (query)  (optional)
     - returns: RequestBuilder<PaginatedTrackList> 
     */
    open class func getTracksWithRequestBuilder(album: Int? = nil, artist: String? = nil, channel: String? = nil, hidden: Bool? = nil, id: [Int]? = nil, includeChannels: Bool? = nil, library: String? = nil, license: String? = nil, mbid: UUID? = nil, ordering: [Ordering_getTracks]? = nil, page: Int? = nil, pageSize: Int? = nil, playable: Bool? = nil, q: String? = nil, related: String? = nil, scope: String? = nil, tag: [String]? = nil, title: String? = nil, titleIcontains: String? = nil, titleIexact: String? = nil, titleStartswith: String? = nil) -> RequestBuilder<PaginatedTrackList> {
        let localVariablePath = "/api/v1/tracks/"
        let localVariableURLString = FunkwhaleClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "album": (wrappedValue: album?.encodeToJSON(), isExplode: true),
            "artist": (wrappedValue: artist?.encodeToJSON(), isExplode: true),
            "channel": (wrappedValue: channel?.encodeToJSON(), isExplode: true),
            "hidden": (wrappedValue: hidden?.encodeToJSON(), isExplode: true),
            "id": (wrappedValue: id?.encodeToJSON(), isExplode: true),
            "include_channels": (wrappedValue: includeChannels?.encodeToJSON(), isExplode: true),
            "library": (wrappedValue: library?.encodeToJSON(), isExplode: true),
            "license": (wrappedValue: license?.encodeToJSON(), isExplode: true),
            "mbid": (wrappedValue: mbid?.encodeToJSON(), isExplode: true),
            "ordering": (wrappedValue: ordering?.encodeToJSON(), isExplode: false),
            "page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
            "page_size": (wrappedValue: pageSize?.encodeToJSON(), isExplode: true),
            "playable": (wrappedValue: playable?.encodeToJSON(), isExplode: true),
            "q": (wrappedValue: q?.encodeToJSON(), isExplode: true),
            "related": (wrappedValue: related?.encodeToJSON(), isExplode: true),
            "scope": (wrappedValue: scope?.encodeToJSON(), isExplode: true),
            "tag": (wrappedValue: tag?.encodeToJSON(), isExplode: true),
            "title": (wrappedValue: title?.encodeToJSON(), isExplode: true),
            "title__icontains": (wrappedValue: titleIcontains?.encodeToJSON(), isExplode: true),
            "title__iexact": (wrappedValue: titleIexact?.encodeToJSON(), isExplode: true),
            "title__startswith": (wrappedValue: titleStartswith?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedTrackList>.Type = FunkwhaleClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
}
