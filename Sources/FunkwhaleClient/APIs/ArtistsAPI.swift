//
// ArtistsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

extension FunkwhaleClientAPI {


open class ArtistsAPI {

    /**

     - parameter id: (path) A unique integer value identifying this artist. 
     - parameter artistWithAlbumsRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func createArtistFetch(id: Int, artistWithAlbumsRequest: ArtistWithAlbumsRequest, apiResponseQueue: DispatchQueue = FunkwhaleClientAPI.apiResponseQueue, completion: @escaping ((_ data: Fetch?, _ error: Error?) -> Void)) -> RequestTask {
        return createArtistFetchWithRequestBuilder(id: id, artistWithAlbumsRequest: artistWithAlbumsRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /api/v1/artists/{id}/fetches/
     - BASIC:
       - type: http
       - name: ApplicationToken
     - OAuth:
       - type: oauth2
       - name: oauth2
     - parameter id: (path) A unique integer value identifying this artist. 
     - parameter artistWithAlbumsRequest: (body)  
     - returns: RequestBuilder<Fetch> 
     */
    open class func createArtistFetchWithRequestBuilder(id: Int, artistWithAlbumsRequest: ArtistWithAlbumsRequest) -> RequestBuilder<Fetch> {
        var localVariablePath = "/api/v1/artists/{id}/fetches/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = FunkwhaleClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: artistWithAlbumsRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Fetch>.Type = FunkwhaleClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this artist. 
     - parameter artistWithAlbumsRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func createArtistMutation(id: Int, artistWithAlbumsRequest: ArtistWithAlbumsRequest, apiResponseQueue: DispatchQueue = FunkwhaleClientAPI.apiResponseQueue, completion: @escaping ((_ data: APIMutation?, _ error: Error?) -> Void)) -> RequestTask {
        return createArtistMutationWithRequestBuilder(id: id, artistWithAlbumsRequest: artistWithAlbumsRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /api/v1/artists/{id}/mutations/
     - BASIC:
       - type: http
       - name: ApplicationToken
     - OAuth:
       - type: oauth2
       - name: oauth2
     - parameter id: (path) A unique integer value identifying this artist. 
     - parameter artistWithAlbumsRequest: (body)  
     - returns: RequestBuilder<APIMutation> 
     */
    open class func createArtistMutationWithRequestBuilder(id: Int, artistWithAlbumsRequest: ArtistWithAlbumsRequest) -> RequestBuilder<APIMutation> {
        var localVariablePath = "/api/v1/artists/{id}/mutations/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = FunkwhaleClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: artistWithAlbumsRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<APIMutation>.Type = FunkwhaleClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this artist. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getArtist(id: Int, apiResponseQueue: DispatchQueue = FunkwhaleClientAPI.apiResponseQueue, completion: @escaping ((_ data: ArtistWithAlbums?, _ error: Error?) -> Void)) -> RequestTask {
        return getArtistWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v1/artists/{id}/
     - BASIC:
       - type: http
       - name: ApplicationToken
     - OAuth:
       - type: oauth2
       - name: oauth2
     - parameter id: (path) A unique integer value identifying this artist. 
     - returns: RequestBuilder<ArtistWithAlbums> 
     */
    open class func getArtistWithRequestBuilder(id: Int) -> RequestBuilder<ArtistWithAlbums> {
        var localVariablePath = "/api/v1/artists/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = FunkwhaleClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ArtistWithAlbums>.Type = FunkwhaleClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter ordering
     */
    public enum Ordering_getArtistFetches: String, CaseIterable {
        case creationDateDesc = "-creation_date"
        case idDesc = "-id"
        case modificationDateDesc = "-modification_date"
        case nameDesc = "-name"
        case randomDesc = "-random"
        case relatedDesc = "-related"
        case creationDate = "creation_date"
        case id = "id"
        case modificationDate = "modification_date"
        case name = "name"
        case random = "random"
        case related = "related"
    }

    /**

     - parameter id: (path) A unique integer value identifying this artist. 
     - parameter contentCategory: (query)  (optional)
     - parameter hasAlbums: (query)  (optional)
     - parameter hidden: (query)  (optional)
     - parameter includeChannels: (query)  (optional)
     - parameter library: (query)  (optional)
     - parameter mbid: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter nameIcontains: (query)  (optional)
     - parameter nameIexact: (query)  (optional)
     - parameter nameStartswith: (query)  (optional)
     - parameter ordering: (query) Ordering (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter playable: (query)  (optional)
     - parameter q: (query)  (optional)
     - parameter related: (query)  (optional)
     - parameter scope: (query)  (optional)
     - parameter tag: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getArtistFetches(id: Int, contentCategory: String? = nil, hasAlbums: Bool? = nil, hidden: Bool? = nil, includeChannels: Bool? = nil, library: String? = nil, mbid: UUID? = nil, name: String? = nil, nameIcontains: String? = nil, nameIexact: String? = nil, nameStartswith: String? = nil, ordering: [Ordering_getArtistFetches]? = nil, page: Int? = nil, pageSize: Int? = nil, playable: Bool? = nil, q: String? = nil, related: String? = nil, scope: String? = nil, tag: [String]? = nil, apiResponseQueue: DispatchQueue = FunkwhaleClientAPI.apiResponseQueue, completion: @escaping ((_ data: PaginatedFetchList?, _ error: Error?) -> Void)) -> RequestTask {
        return getArtistFetchesWithRequestBuilder(id: id, contentCategory: contentCategory, hasAlbums: hasAlbums, hidden: hidden, includeChannels: includeChannels, library: library, mbid: mbid, name: name, nameIcontains: nameIcontains, nameIexact: nameIexact, nameStartswith: nameStartswith, ordering: ordering, page: page, pageSize: pageSize, playable: playable, q: q, related: related, scope: scope, tag: tag).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v1/artists/{id}/fetches/
     - BASIC:
       - type: http
       - name: ApplicationToken
     - OAuth:
       - type: oauth2
       - name: oauth2
     - parameter id: (path) A unique integer value identifying this artist. 
     - parameter contentCategory: (query)  (optional)
     - parameter hasAlbums: (query)  (optional)
     - parameter hidden: (query)  (optional)
     - parameter includeChannels: (query)  (optional)
     - parameter library: (query)  (optional)
     - parameter mbid: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter nameIcontains: (query)  (optional)
     - parameter nameIexact: (query)  (optional)
     - parameter nameStartswith: (query)  (optional)
     - parameter ordering: (query) Ordering (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter playable: (query)  (optional)
     - parameter q: (query)  (optional)
     - parameter related: (query)  (optional)
     - parameter scope: (query)  (optional)
     - parameter tag: (query)  (optional)
     - returns: RequestBuilder<PaginatedFetchList> 
     */
    open class func getArtistFetchesWithRequestBuilder(id: Int, contentCategory: String? = nil, hasAlbums: Bool? = nil, hidden: Bool? = nil, includeChannels: Bool? = nil, library: String? = nil, mbid: UUID? = nil, name: String? = nil, nameIcontains: String? = nil, nameIexact: String? = nil, nameStartswith: String? = nil, ordering: [Ordering_getArtistFetches]? = nil, page: Int? = nil, pageSize: Int? = nil, playable: Bool? = nil, q: String? = nil, related: String? = nil, scope: String? = nil, tag: [String]? = nil) -> RequestBuilder<PaginatedFetchList> {
        var localVariablePath = "/api/v1/artists/{id}/fetches/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = FunkwhaleClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "content_category": (wrappedValue: contentCategory?.encodeToJSON(), isExplode: true),
            "has_albums": (wrappedValue: hasAlbums?.encodeToJSON(), isExplode: true),
            "hidden": (wrappedValue: hidden?.encodeToJSON(), isExplode: true),
            "include_channels": (wrappedValue: includeChannels?.encodeToJSON(), isExplode: true),
            "library": (wrappedValue: library?.encodeToJSON(), isExplode: true),
            "mbid": (wrappedValue: mbid?.encodeToJSON(), isExplode: true),
            "name": (wrappedValue: name?.encodeToJSON(), isExplode: true),
            "name__icontains": (wrappedValue: nameIcontains?.encodeToJSON(), isExplode: true),
            "name__iexact": (wrappedValue: nameIexact?.encodeToJSON(), isExplode: true),
            "name__startswith": (wrappedValue: nameStartswith?.encodeToJSON(), isExplode: true),
            "ordering": (wrappedValue: ordering?.encodeToJSON(), isExplode: false),
            "page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
            "page_size": (wrappedValue: pageSize?.encodeToJSON(), isExplode: true),
            "playable": (wrappedValue: playable?.encodeToJSON(), isExplode: true),
            "q": (wrappedValue: q?.encodeToJSON(), isExplode: true),
            "related": (wrappedValue: related?.encodeToJSON(), isExplode: true),
            "scope": (wrappedValue: scope?.encodeToJSON(), isExplode: true),
            "tag": (wrappedValue: tag?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedFetchList>.Type = FunkwhaleClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter ordering
     */
    public enum Ordering_getArtistLibraries: String, CaseIterable {
        case creationDateDesc = "-creation_date"
        case idDesc = "-id"
        case modificationDateDesc = "-modification_date"
        case nameDesc = "-name"
        case randomDesc = "-random"
        case relatedDesc = "-related"
        case creationDate = "creation_date"
        case id = "id"
        case modificationDate = "modification_date"
        case name = "name"
        case random = "random"
        case related = "related"
    }

    /**

     - parameter id: (path) A unique integer value identifying this artist. 
     - parameter contentCategory: (query)  (optional)
     - parameter hasAlbums: (query)  (optional)
     - parameter hidden: (query)  (optional)
     - parameter includeChannels: (query)  (optional)
     - parameter library: (query)  (optional)
     - parameter mbid: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter nameIcontains: (query)  (optional)
     - parameter nameIexact: (query)  (optional)
     - parameter nameStartswith: (query)  (optional)
     - parameter ordering: (query) Ordering (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter playable: (query)  (optional)
     - parameter q: (query)  (optional)
     - parameter related: (query)  (optional)
     - parameter scope: (query)  (optional)
     - parameter tag: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getArtistLibraries(id: Int, contentCategory: String? = nil, hasAlbums: Bool? = nil, hidden: Bool? = nil, includeChannels: Bool? = nil, library: String? = nil, mbid: UUID? = nil, name: String? = nil, nameIcontains: String? = nil, nameIexact: String? = nil, nameStartswith: String? = nil, ordering: [Ordering_getArtistLibraries]? = nil, page: Int? = nil, pageSize: Int? = nil, playable: Bool? = nil, q: String? = nil, related: String? = nil, scope: String? = nil, tag: [String]? = nil, apiResponseQueue: DispatchQueue = FunkwhaleClientAPI.apiResponseQueue, completion: @escaping ((_ data: PaginatedLibraryList?, _ error: Error?) -> Void)) -> RequestTask {
        return getArtistLibrariesWithRequestBuilder(id: id, contentCategory: contentCategory, hasAlbums: hasAlbums, hidden: hidden, includeChannels: includeChannels, library: library, mbid: mbid, name: name, nameIcontains: nameIcontains, nameIexact: nameIexact, nameStartswith: nameStartswith, ordering: ordering, page: page, pageSize: pageSize, playable: playable, q: q, related: related, scope: scope, tag: tag).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v1/artists/{id}/libraries/
     - BASIC:
       - type: http
       - name: ApplicationToken
     - OAuth:
       - type: oauth2
       - name: oauth2
     - parameter id: (path) A unique integer value identifying this artist. 
     - parameter contentCategory: (query)  (optional)
     - parameter hasAlbums: (query)  (optional)
     - parameter hidden: (query)  (optional)
     - parameter includeChannels: (query)  (optional)
     - parameter library: (query)  (optional)
     - parameter mbid: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter nameIcontains: (query)  (optional)
     - parameter nameIexact: (query)  (optional)
     - parameter nameStartswith: (query)  (optional)
     - parameter ordering: (query) Ordering (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter playable: (query)  (optional)
     - parameter q: (query)  (optional)
     - parameter related: (query)  (optional)
     - parameter scope: (query)  (optional)
     - parameter tag: (query)  (optional)
     - returns: RequestBuilder<PaginatedLibraryList> 
     */
    open class func getArtistLibrariesWithRequestBuilder(id: Int, contentCategory: String? = nil, hasAlbums: Bool? = nil, hidden: Bool? = nil, includeChannels: Bool? = nil, library: String? = nil, mbid: UUID? = nil, name: String? = nil, nameIcontains: String? = nil, nameIexact: String? = nil, nameStartswith: String? = nil, ordering: [Ordering_getArtistLibraries]? = nil, page: Int? = nil, pageSize: Int? = nil, playable: Bool? = nil, q: String? = nil, related: String? = nil, scope: String? = nil, tag: [String]? = nil) -> RequestBuilder<PaginatedLibraryList> {
        var localVariablePath = "/api/v1/artists/{id}/libraries/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = FunkwhaleClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "content_category": (wrappedValue: contentCategory?.encodeToJSON(), isExplode: true),
            "has_albums": (wrappedValue: hasAlbums?.encodeToJSON(), isExplode: true),
            "hidden": (wrappedValue: hidden?.encodeToJSON(), isExplode: true),
            "include_channels": (wrappedValue: includeChannels?.encodeToJSON(), isExplode: true),
            "library": (wrappedValue: library?.encodeToJSON(), isExplode: true),
            "mbid": (wrappedValue: mbid?.encodeToJSON(), isExplode: true),
            "name": (wrappedValue: name?.encodeToJSON(), isExplode: true),
            "name__icontains": (wrappedValue: nameIcontains?.encodeToJSON(), isExplode: true),
            "name__iexact": (wrappedValue: nameIexact?.encodeToJSON(), isExplode: true),
            "name__startswith": (wrappedValue: nameStartswith?.encodeToJSON(), isExplode: true),
            "ordering": (wrappedValue: ordering?.encodeToJSON(), isExplode: false),
            "page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
            "page_size": (wrappedValue: pageSize?.encodeToJSON(), isExplode: true),
            "playable": (wrappedValue: playable?.encodeToJSON(), isExplode: true),
            "q": (wrappedValue: q?.encodeToJSON(), isExplode: true),
            "related": (wrappedValue: related?.encodeToJSON(), isExplode: true),
            "scope": (wrappedValue: scope?.encodeToJSON(), isExplode: true),
            "tag": (wrappedValue: tag?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedLibraryList>.Type = FunkwhaleClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter ordering
     */
    public enum Ordering_getArtistMutations: String, CaseIterable {
        case creationDateDesc = "-creation_date"
        case idDesc = "-id"
        case modificationDateDesc = "-modification_date"
        case namDesce = "-name"
        case randomDesc = "-random"
        case relatedDesc = "-related"
        case creationDate = "creation_date"
        case id = "id"
        case modificationDate = "modification_date"
        case name = "name"
        case random = "random"
        case related = "related"
    }

    /**

     - parameter id: (path) A unique integer value identifying this artist. 
     - parameter contentCategory: (query)  (optional)
     - parameter hasAlbums: (query)  (optional)
     - parameter hidden: (query)  (optional)
     - parameter includeChannels: (query)  (optional)
     - parameter library: (query)  (optional)
     - parameter mbid: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter nameIcontains: (query)  (optional)
     - parameter nameIexact: (query)  (optional)
     - parameter nameStartswith: (query)  (optional)
     - parameter ordering: (query) Ordering (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter playable: (query)  (optional)
     - parameter q: (query)  (optional)
     - parameter related: (query)  (optional)
     - parameter scope: (query)  (optional)
     - parameter tag: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getArtistMutations(id: Int, contentCategory: String? = nil, hasAlbums: Bool? = nil, hidden: Bool? = nil, includeChannels: Bool? = nil, library: String? = nil, mbid: UUID? = nil, name: String? = nil, nameIcontains: String? = nil, nameIexact: String? = nil, nameStartswith: String? = nil, ordering: [Ordering_getArtistMutations]? = nil, page: Int? = nil, pageSize: Int? = nil, playable: Bool? = nil, q: String? = nil, related: String? = nil, scope: String? = nil, tag: [String]? = nil, apiResponseQueue: DispatchQueue = FunkwhaleClientAPI.apiResponseQueue, completion: @escaping ((_ data: PaginatedAPIMutationList?, _ error: Error?) -> Void)) -> RequestTask {
        return getArtistMutationsWithRequestBuilder(id: id, contentCategory: contentCategory, hasAlbums: hasAlbums, hidden: hidden, includeChannels: includeChannels, library: library, mbid: mbid, name: name, nameIcontains: nameIcontains, nameIexact: nameIexact, nameStartswith: nameStartswith, ordering: ordering, page: page, pageSize: pageSize, playable: playable, q: q, related: related, scope: scope, tag: tag).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v1/artists/{id}/mutations/
     - BASIC:
       - type: http
       - name: ApplicationToken
     - OAuth:
       - type: oauth2
       - name: oauth2
     - parameter id: (path) A unique integer value identifying this artist. 
     - parameter contentCategory: (query)  (optional)
     - parameter hasAlbums: (query)  (optional)
     - parameter hidden: (query)  (optional)
     - parameter includeChannels: (query)  (optional)
     - parameter library: (query)  (optional)
     - parameter mbid: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter nameIcontains: (query)  (optional)
     - parameter nameIexact: (query)  (optional)
     - parameter nameStartswith: (query)  (optional)
     - parameter ordering: (query) Ordering (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter playable: (query)  (optional)
     - parameter q: (query)  (optional)
     - parameter related: (query)  (optional)
     - parameter scope: (query)  (optional)
     - parameter tag: (query)  (optional)
     - returns: RequestBuilder<PaginatedAPIMutationList> 
     */
    open class func getArtistMutationsWithRequestBuilder(id: Int, contentCategory: String? = nil, hasAlbums: Bool? = nil, hidden: Bool? = nil, includeChannels: Bool? = nil, library: String? = nil, mbid: UUID? = nil, name: String? = nil, nameIcontains: String? = nil, nameIexact: String? = nil, nameStartswith: String? = nil, ordering: [Ordering_getArtistMutations]? = nil, page: Int? = nil, pageSize: Int? = nil, playable: Bool? = nil, q: String? = nil, related: String? = nil, scope: String? = nil, tag: [String]? = nil) -> RequestBuilder<PaginatedAPIMutationList> {
        var localVariablePath = "/api/v1/artists/{id}/mutations/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = FunkwhaleClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "content_category": (wrappedValue: contentCategory?.encodeToJSON(), isExplode: true),
            "has_albums": (wrappedValue: hasAlbums?.encodeToJSON(), isExplode: true),
            "hidden": (wrappedValue: hidden?.encodeToJSON(), isExplode: true),
            "include_channels": (wrappedValue: includeChannels?.encodeToJSON(), isExplode: true),
            "library": (wrappedValue: library?.encodeToJSON(), isExplode: true),
            "mbid": (wrappedValue: mbid?.encodeToJSON(), isExplode: true),
            "name": (wrappedValue: name?.encodeToJSON(), isExplode: true),
            "name__icontains": (wrappedValue: nameIcontains?.encodeToJSON(), isExplode: true),
            "name__iexact": (wrappedValue: nameIexact?.encodeToJSON(), isExplode: true),
            "name__startswith": (wrappedValue: nameStartswith?.encodeToJSON(), isExplode: true),
            "ordering": (wrappedValue: ordering?.encodeToJSON(), isExplode: false),
            "page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
            "page_size": (wrappedValue: pageSize?.encodeToJSON(), isExplode: true),
            "playable": (wrappedValue: playable?.encodeToJSON(), isExplode: true),
            "q": (wrappedValue: q?.encodeToJSON(), isExplode: true),
            "related": (wrappedValue: related?.encodeToJSON(), isExplode: true),
            "scope": (wrappedValue: scope?.encodeToJSON(), isExplode: true),
            "tag": (wrappedValue: tag?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedAPIMutationList>.Type = FunkwhaleClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter ordering
     */
    public enum Ordering_getArtists: String, CaseIterable {
        case creationDateDesc = "-creation_date"
        case idDesc = "-id"
        case modificationDateDesc = "-modification_date"
        case nameDesc = "-name"
        case randomDesc = "-random"
        case relatedDesc = "-related"
        case creationDate = "creation_date"
        case id = "id"
        case modificationDate = "modification_date"
        case name = "name"
        case random = "random"
        case related = "related"
    }

    /**

     - parameter contentCategory: (query)  (optional)
     - parameter hasAlbums: (query)  (optional)
     - parameter hidden: (query)  (optional)
     - parameter includeChannels: (query)  (optional)
     - parameter library: (query)  (optional)
     - parameter mbid: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter nameIcontains: (query)  (optional)
     - parameter nameIexact: (query)  (optional)
     - parameter nameStartswith: (query)  (optional)
     - parameter ordering: (query) Ordering (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter playable: (query)  (optional)
     - parameter q: (query)  (optional)
     - parameter related: (query)  (optional)
     - parameter scope: (query)  (optional)
     - parameter tag: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getArtists(contentCategory: String? = nil, hasAlbums: Bool? = nil, hidden: Bool? = nil, includeChannels: Bool? = nil, library: String? = nil, mbid: UUID? = nil, name: String? = nil, nameIcontains: String? = nil, nameIexact: String? = nil, nameStartswith: String? = nil, ordering: [Ordering_getArtists]? = nil, page: Int? = nil, pageSize: Int? = nil, playable: Bool? = nil, q: String? = nil, related: String? = nil, scope: String? = nil, tag: [String]? = nil, apiResponseQueue: DispatchQueue = FunkwhaleClientAPI.apiResponseQueue, completion: @escaping ((_ data: PaginatedArtistWithAlbumsList?, _ error: Error?) -> Void)) -> RequestTask {
        return getArtistsWithRequestBuilder(contentCategory: contentCategory, hasAlbums: hasAlbums, hidden: hidden, includeChannels: includeChannels, library: library, mbid: mbid, name: name, nameIcontains: nameIcontains, nameIexact: nameIexact, nameStartswith: nameStartswith, ordering: ordering, page: page, pageSize: pageSize, playable: playable, q: q, related: related, scope: scope, tag: tag).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v1/artists/
     - BASIC:
       - type: http
       - name: ApplicationToken
     - OAuth:
       - type: oauth2
       - name: oauth2
     - parameter contentCategory: (query)  (optional)
     - parameter hasAlbums: (query)  (optional)
     - parameter hidden: (query)  (optional)
     - parameter includeChannels: (query)  (optional)
     - parameter library: (query)  (optional)
     - parameter mbid: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter nameIcontains: (query)  (optional)
     - parameter nameIexact: (query)  (optional)
     - parameter nameStartswith: (query)  (optional)
     - parameter ordering: (query) Ordering (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter playable: (query)  (optional)
     - parameter q: (query)  (optional)
     - parameter related: (query)  (optional)
     - parameter scope: (query)  (optional)
     - parameter tag: (query)  (optional)
     - returns: RequestBuilder<PaginatedArtistWithAlbumsList> 
     */
    open class func getArtistsWithRequestBuilder(contentCategory: String? = nil, hasAlbums: Bool? = nil, hidden: Bool? = nil, includeChannels: Bool? = nil, library: String? = nil, mbid: UUID? = nil, name: String? = nil, nameIcontains: String? = nil, nameIexact: String? = nil, nameStartswith: String? = nil, ordering: [Ordering_getArtists]? = nil, page: Int? = nil, pageSize: Int? = nil, playable: Bool? = nil, q: String? = nil, related: String? = nil, scope: String? = nil, tag: [String]? = nil) -> RequestBuilder<PaginatedArtistWithAlbumsList> {
        let localVariablePath = "/api/v1/artists/"
        let localVariableURLString = FunkwhaleClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "content_category": (wrappedValue: contentCategory?.encodeToJSON(), isExplode: true),
            "has_albums": (wrappedValue: hasAlbums?.encodeToJSON(), isExplode: true),
            "hidden": (wrappedValue: hidden?.encodeToJSON(), isExplode: true),
            "include_channels": (wrappedValue: includeChannels?.encodeToJSON(), isExplode: true),
            "library": (wrappedValue: library?.encodeToJSON(), isExplode: true),
            "mbid": (wrappedValue: mbid?.encodeToJSON(), isExplode: true),
            "name": (wrappedValue: name?.encodeToJSON(), isExplode: true),
            "name__icontains": (wrappedValue: nameIcontains?.encodeToJSON(), isExplode: true),
            "name__iexact": (wrappedValue: nameIexact?.encodeToJSON(), isExplode: true),
            "name__startswith": (wrappedValue: nameStartswith?.encodeToJSON(), isExplode: true),
            "ordering": (wrappedValue: ordering?.encodeToJSON(), isExplode: false),
            "page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
            "page_size": (wrappedValue: pageSize?.encodeToJSON(), isExplode: true),
            "playable": (wrappedValue: playable?.encodeToJSON(), isExplode: true),
            "q": (wrappedValue: q?.encodeToJSON(), isExplode: true),
            "related": (wrappedValue: related?.encodeToJSON(), isExplode: true),
            "scope": (wrappedValue: scope?.encodeToJSON(), isExplode: true),
            "tag": (wrappedValue: tag?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedArtistWithAlbumsList>.Type = FunkwhaleClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
}
