//
// ManageUser.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

@available(*, deprecated, renamed: "FunkwhaleClientAPI.ManageUser")
public typealias ManageUser = FunkwhaleClientAPI.ManageUser

extension FunkwhaleClientAPI {

public struct ManageUser: Codable, JSONEncodable, Hashable {

    static let nameRule = StringRule(minLength: nil, maxLength: 255, pattern: nil)
    public var id: Int
    /** Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only. */
    public var username: String
    public var actor: [String: AnyCodable]
    public var email: String
    public var name: String?
    /** Designates whether this user should be treated as active. Unselect this instead of deleting accounts. */
    public var isActive: Bool?
    /** Designates whether the user can log into this admin site. */
    public var isStaff: Bool?
    /** Designates that this user has all permissions without explicitly assigning them. */
    public var isSuperuser: Bool?
    public var dateJoined: Date
    public var lastActivity: Date?
    public var privacyLevel: PrivacyLevelEnum
    public var uploadQuota: Int?
    public var fullUsername: String

    public init(id: Int, username: String, actor: [String: AnyCodable], email: String, name: String? = nil, isActive: Bool? = nil, isStaff: Bool? = nil, isSuperuser: Bool? = nil, dateJoined: Date, lastActivity: Date?, privacyLevel: PrivacyLevelEnum, uploadQuota: Int? = nil, fullUsername: String) {
        self.id = id
        self.username = username
        self.actor = actor
        self.email = email
        self.name = name
        self.isActive = isActive
        self.isStaff = isStaff
        self.isSuperuser = isSuperuser
        self.dateJoined = dateJoined
        self.lastActivity = lastActivity
        self.privacyLevel = privacyLevel
        self.uploadQuota = uploadQuota
        self.fullUsername = fullUsername
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case username
        case actor
        case email
        case name
        case isActive = "is_active"
        case isStaff = "is_staff"
        case isSuperuser = "is_superuser"
        case dateJoined = "date_joined"
        case lastActivity = "last_activity"
        case privacyLevel = "privacy_level"
        case uploadQuota = "upload_quota"
        case fullUsername = "full_username"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encode(username, forKey: .username)
        try container.encode(actor, forKey: .actor)
        try container.encode(email, forKey: .email)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(isActive, forKey: .isActive)
        try container.encodeIfPresent(isStaff, forKey: .isStaff)
        try container.encodeIfPresent(isSuperuser, forKey: .isSuperuser)
        try container.encode(dateJoined, forKey: .dateJoined)
        try container.encode(lastActivity, forKey: .lastActivity)
        try container.encode(privacyLevel, forKey: .privacyLevel)
        try container.encodeIfPresent(uploadQuota, forKey: .uploadQuota)
        try container.encode(fullUsername, forKey: .fullUsername)
    }
}

}
