//
// ManageReportRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

@available(*, deprecated, renamed: "FunkwhaleClientAPI.ManageReportRequest")
public typealias ManageReportRequest = FunkwhaleClientAPI.ManageReportRequest

extension FunkwhaleClientAPI {

public struct ManageReportRequest: Codable, JSONEncodable, Hashable {

    public var type: ReportTypeEnum
    public var target: [String: AnyCodable]
    public var isHandled: Bool?
    public var assignedTo: ManageBaseActorRequest?
    public var targetOwner: ManageBaseActorRequest?
    public var submitter: ManageBaseActorRequest?
    public var notes: [ManageBaseNoteRequest]?

    public init(type: ReportTypeEnum, target: [String: AnyCodable], isHandled: Bool? = nil, assignedTo: ManageBaseActorRequest? = nil, targetOwner: ManageBaseActorRequest? = nil, submitter: ManageBaseActorRequest? = nil, notes: [ManageBaseNoteRequest]? = nil) {
        self.type = type
        self.target = target
        self.isHandled = isHandled
        self.assignedTo = assignedTo
        self.targetOwner = targetOwner
        self.submitter = submitter
        self.notes = notes
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case type
        case target
        case isHandled = "is_handled"
        case assignedTo = "assigned_to"
        case targetOwner = "target_owner"
        case submitter
        case notes
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(type, forKey: .type)
        try container.encode(target, forKey: .target)
        try container.encodeIfPresent(isHandled, forKey: .isHandled)
        try container.encodeIfPresent(assignedTo, forKey: .assignedTo)
        try container.encodeIfPresent(targetOwner, forKey: .targetOwner)
        try container.encodeIfPresent(submitter, forKey: .submitter)
        try container.encodeIfPresent(notes, forKey: .notes)
    }
}

}
