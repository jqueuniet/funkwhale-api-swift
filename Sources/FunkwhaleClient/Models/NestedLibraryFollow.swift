//
// NestedLibraryFollow.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

@available(*, deprecated, renamed: "FunkwhaleClientAPI.NestedLibraryFollow")
public typealias NestedLibraryFollow = FunkwhaleClientAPI.NestedLibraryFollow

extension FunkwhaleClientAPI {

public struct NestedLibraryFollow: Codable, JSONEncodable, Hashable {

    static let fidRule = StringRule(minLength: nil, maxLength: 500, pattern: nil)
    public var creationDate: Date?
    public var uuid: UUID?
    public var fid: String?
    public var approved: Bool?
    public var modificationDate: Date

    public init(creationDate: Date? = nil, uuid: UUID? = nil, fid: String? = nil, approved: Bool? = nil, modificationDate: Date) {
        self.creationDate = creationDate
        self.uuid = uuid
        self.fid = fid
        self.approved = approved
        self.modificationDate = modificationDate
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case creationDate = "creation_date"
        case uuid
        case fid
        case approved
        case modificationDate = "modification_date"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(creationDate, forKey: .creationDate)
        try container.encodeIfPresent(uuid, forKey: .uuid)
        try container.encodeIfPresent(fid, forKey: .fid)
        try container.encodeIfPresent(approved, forKey: .approved)
        try container.encode(modificationDate, forKey: .modificationDate)
    }
}

}
