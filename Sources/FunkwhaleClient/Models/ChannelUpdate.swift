//
// ChannelUpdate.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

@available(*, deprecated, renamed: "FunkwhaleClientAPI.ChannelUpdate")
public typealias ChannelUpdate = FunkwhaleClientAPI.ChannelUpdate

extension FunkwhaleClientAPI {

public struct ChannelUpdate: Codable, JSONEncodable, Hashable {

    static let nameRule = StringRule(minLength: nil, maxLength: 200, pattern: nil)
    public var name: String
    public var description: Content?
    public var tags: [String]
    public var contentCategory: ContentCategoryEnum
    public var metadata: [String: AnyCodable]?

    public init(name: String, description: Content?, tags: [String], contentCategory: ContentCategoryEnum, metadata: [String: AnyCodable]? = nil) {
        self.name = name
        self.description = description
        self.tags = tags
        self.contentCategory = contentCategory
        self.metadata = metadata
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case name
        case description
        case tags
        case contentCategory = "content_category"
        case metadata
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(name, forKey: .name)
        try container.encode(description, forKey: .description)
        try container.encode(tags, forKey: .tags)
        try container.encode(contentCategory, forKey: .contentCategory)
        try container.encodeIfPresent(metadata, forKey: .metadata)
    }
}

}
