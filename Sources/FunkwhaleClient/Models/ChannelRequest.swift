//
// ChannelRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

@available(*, deprecated, renamed: "FunkwhaleClientAPI.ChannelRequest")
public typealias ChannelRequest = FunkwhaleClientAPI.ChannelRequest

extension FunkwhaleClientAPI {

public struct ChannelRequest: Codable, JSONEncodable, Hashable {

    static let rssUrlRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    public var uuid: UUID?
    public var artist: SimpleChannelArtistRequest
    public var attributedTo: APIActorRequest
    public var creationDate: Date?
    public var metadata: [String: AnyCodable]?
    public var rssUrl: String

    public init(uuid: UUID? = nil, artist: SimpleChannelArtistRequest, attributedTo: APIActorRequest, creationDate: Date? = nil, metadata: [String: AnyCodable]? = nil, rssUrl: String) {
        self.uuid = uuid
        self.artist = artist
        self.attributedTo = attributedTo
        self.creationDate = creationDate
        self.metadata = metadata
        self.rssUrl = rssUrl
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case uuid
        case artist
        case attributedTo = "attributed_to"
        case creationDate = "creation_date"
        case metadata
        case rssUrl = "rss_url"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(uuid, forKey: .uuid)
        try container.encode(artist, forKey: .artist)
        try container.encode(attributedTo, forKey: .attributedTo)
        try container.encodeIfPresent(creationDate, forKey: .creationDate)
        try container.encodeIfPresent(metadata, forKey: .metadata)
        try container.encode(rssUrl, forKey: .rssUrl)
    }
}

}
