//
// ManageChannel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

@available(*, deprecated, renamed: "FunkwhaleClientAPI.ManageChannel")
public typealias ManageChannel = FunkwhaleClientAPI.ManageChannel

extension FunkwhaleClientAPI {

public struct ManageChannel: Codable, JSONEncodable, Hashable {

    public var id: Int
    public var uuid: UUID
    public var creationDate: Date
    public var artist: ManageArtist
    public var attributedTo: ManageBaseActor
    public var actor: ManageBaseActor
    public var rssUrl: String?
    public var metadata: [String: AnyCodable]

    public init(id: Int, uuid: UUID, creationDate: Date, artist: ManageArtist, attributedTo: ManageBaseActor, actor: ManageBaseActor, rssUrl: String?, metadata: [String: AnyCodable]) {
        self.id = id
        self.uuid = uuid
        self.creationDate = creationDate
        self.artist = artist
        self.attributedTo = attributedTo
        self.actor = actor
        self.rssUrl = rssUrl
        self.metadata = metadata
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case uuid
        case creationDate = "creation_date"
        case artist
        case attributedTo = "attributed_to"
        case actor
        case rssUrl = "rss_url"
        case metadata
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encode(uuid, forKey: .uuid)
        try container.encode(creationDate, forKey: .creationDate)
        try container.encode(artist, forKey: .artist)
        try container.encode(attributedTo, forKey: .attributedTo)
        try container.encode(actor, forKey: .actor)
        try container.encode(rssUrl, forKey: .rssUrl)
        try container.encode(metadata, forKey: .metadata)
    }
}

}
