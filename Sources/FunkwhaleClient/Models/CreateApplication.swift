//
// CreateApplication.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

@available(*, deprecated, renamed: "FunkwhaleClientAPI.CreateApplication")
public typealias CreateApplication = FunkwhaleClientAPI.CreateApplication

extension FunkwhaleClientAPI {

public struct CreateApplication: Codable, JSONEncodable, Hashable {

    static let nameRule = StringRule(minLength: nil, maxLength: 255, pattern: nil)
    static let clientSecretRule = StringRule(minLength: nil, maxLength: 255, pattern: nil)
    public var clientId: String
    public var name: String
    public var scopes: String? = "read"
    /** Hashed on Save. Copy it now if this is a new secret. */
    public var clientSecret: String?
    public var created: Date
    public var updated: Date
    /** Allowed URIs list, space separated */
    public var redirectUris: String?

    public init(clientId: String, name: String, scopes: String? = "read", clientSecret: String? = nil, created: Date, updated: Date, redirectUris: String? = nil) {
        self.clientId = clientId
        self.name = name
        self.scopes = scopes
        self.clientSecret = clientSecret
        self.created = created
        self.updated = updated
        self.redirectUris = redirectUris
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case clientId = "client_id"
        case name
        case scopes
        case clientSecret = "client_secret"
        case created
        case updated
        case redirectUris = "redirect_uris"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(clientId, forKey: .clientId)
        try container.encode(name, forKey: .name)
        try container.encodeIfPresent(scopes, forKey: .scopes)
        try container.encodeIfPresent(clientSecret, forKey: .clientSecret)
        try container.encode(created, forKey: .created)
        try container.encode(updated, forKey: .updated)
        try container.encodeIfPresent(redirectUris, forKey: .redirectUris)
    }
}

}
