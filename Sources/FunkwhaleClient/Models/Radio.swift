//
// Radio.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

@available(*, deprecated, renamed: "FunkwhaleClientAPI.Radio")
public typealias Radio = FunkwhaleClientAPI.Radio

extension FunkwhaleClientAPI {

public struct Radio: Codable, JSONEncodable, Hashable {

    static let nameRule = StringRule(minLength: nil, maxLength: 100, pattern: nil)
    public var id: Int
    public var isPublic: Bool?
    public var name: String
    public var creationDate: Date
    public var user: UserBasic
    public var config: [String: AnyCodable]
    public var description: String?

    public init(id: Int, isPublic: Bool? = nil, name: String, creationDate: Date, user: UserBasic, config: [String: AnyCodable], description: String? = nil) {
        self.id = id
        self.isPublic = isPublic
        self.name = name
        self.creationDate = creationDate
        self.user = user
        self.config = config
        self.description = description
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case isPublic = "is_public"
        case name
        case creationDate = "creation_date"
        case user
        case config
        case description
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encodeIfPresent(isPublic, forKey: .isPublic)
        try container.encode(name, forKey: .name)
        try container.encode(creationDate, forKey: .creationDate)
        try container.encode(user, forKey: .user)
        try container.encode(config, forKey: .config)
        try container.encodeIfPresent(description, forKey: .description)
    }
}

}
