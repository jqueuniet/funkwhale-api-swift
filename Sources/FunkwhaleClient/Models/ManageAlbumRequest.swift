//
// ManageAlbumRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

@available(*, deprecated, renamed: "FunkwhaleClientAPI.ManageAlbumRequest")
public typealias ManageAlbumRequest = FunkwhaleClientAPI.ManageAlbumRequest

extension FunkwhaleClientAPI {

public struct ManageAlbumRequest: Codable, JSONEncodable, Hashable {

    static let fidRule = StringRule(minLength: 1, maxLength: 500, pattern: nil)
    static let titleRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    static let domainRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    public var fid: String?
    public var mbid: UUID?
    public var title: String
    public var creationDate: Date?
    public var releaseDate: Date?
    public var cover: CoverFieldRequest
    public var domain: String
    public var artist: ManageNestedArtistRequest
    public var attributedTo: ManageBaseActorRequest

    public init(fid: String? = nil, mbid: UUID? = nil, title: String, creationDate: Date? = nil, releaseDate: Date? = nil, cover: CoverFieldRequest, domain: String, artist: ManageNestedArtistRequest, attributedTo: ManageBaseActorRequest) {
        self.fid = fid
        self.mbid = mbid
        self.title = title
        self.creationDate = creationDate
        self.releaseDate = releaseDate
        self.cover = cover
        self.domain = domain
        self.artist = artist
        self.attributedTo = attributedTo
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case fid
        case mbid
        case title
        case creationDate = "creation_date"
        case releaseDate = "release_date"
        case cover
        case domain
        case artist
        case attributedTo = "attributed_to"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(fid, forKey: .fid)
        try container.encodeIfPresent(mbid, forKey: .mbid)
        try container.encode(title, forKey: .title)
        try container.encodeIfPresent(creationDate, forKey: .creationDate)
        try container.encodeIfPresent(releaseDate, forKey: .releaseDate)
        try container.encode(cover, forKey: .cover)
        try container.encode(domain, forKey: .domain)
        try container.encode(artist, forKey: .artist)
        try container.encode(attributedTo, forKey: .attributedTo)
    }
}

}
