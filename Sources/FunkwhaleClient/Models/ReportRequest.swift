//
// ReportRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

@available(*, deprecated, renamed: "FunkwhaleClientAPI.ReportRequest")
public typealias ReportRequest = FunkwhaleClientAPI.ReportRequest

extension FunkwhaleClientAPI {

public struct ReportRequest: Codable, JSONEncodable, Hashable {

    static let summaryRule = StringRule(minLength: nil, maxLength: 50000, pattern: nil)
    static let submitterEmailRule = StringRule(minLength: 1, maxLength: 254, pattern: nil)
    public var summary: String?
    public var submitterEmail: String?
    public var target: [String: AnyCodable]
    public var type: ReportTypeEnum

    public init(summary: String? = nil, submitterEmail: String? = nil, target: [String: AnyCodable], type: ReportTypeEnum) {
        self.summary = summary
        self.submitterEmail = submitterEmail
        self.target = target
        self.type = type
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case summary
        case submitterEmail = "submitter_email"
        case target
        case type
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(summary, forKey: .summary)
        try container.encodeIfPresent(submitterEmail, forKey: .submitterEmail)
        try container.encode(target, forKey: .target)
        try container.encode(type, forKey: .type)
    }
}

}
