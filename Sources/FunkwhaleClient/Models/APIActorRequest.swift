//
// APIActorRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

@available(*, deprecated, renamed: "FunkwhaleClientAPI.APIActorRequest")
public typealias APIActorRequest = FunkwhaleClientAPI.APIActorRequest

extension FunkwhaleClientAPI {

public struct APIActorRequest: Codable, JSONEncodable, Hashable {

    static let fidRule = StringRule(minLength: 1, maxLength: 500, pattern: nil)
    static let urlRule = StringRule(minLength: nil, maxLength: 500, pattern: nil)
    static let summaryRule = StringRule(minLength: nil, maxLength: 500, pattern: nil)
    static let preferredUsernameRule = StringRule(minLength: nil, maxLength: 200, pattern: nil)
    static let nameRule = StringRule(minLength: nil, maxLength: 200, pattern: nil)
    static let domainRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    public var fid: String
    public var url: String?
    public var creationDate: Date?
    public var summary: String?
    public var preferredUsername: String?
    public var name: String?
    public var lastFetchDate: Date?
    public var domain: String
    public var type: FederationChoiceEnum?
    public var manuallyApprovesFollowers: Bool?

    public init(fid: String, url: String? = nil, creationDate: Date? = nil, summary: String? = nil, preferredUsername: String?, name: String? = nil, lastFetchDate: Date? = nil, domain: String, type: FederationChoiceEnum? = nil, manuallyApprovesFollowers: Bool? = nil) {
        self.fid = fid
        self.url = url
        self.creationDate = creationDate
        self.summary = summary
        self.preferredUsername = preferredUsername
        self.name = name
        self.lastFetchDate = lastFetchDate
        self.domain = domain
        self.type = type
        self.manuallyApprovesFollowers = manuallyApprovesFollowers
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case fid
        case url
        case creationDate = "creation_date"
        case summary
        case preferredUsername = "preferred_username"
        case name
        case lastFetchDate = "last_fetch_date"
        case domain
        case type
        case manuallyApprovesFollowers = "manually_approves_followers"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(fid, forKey: .fid)
        try container.encodeIfPresent(url, forKey: .url)
        try container.encodeIfPresent(creationDate, forKey: .creationDate)
        try container.encodeIfPresent(summary, forKey: .summary)
        try container.encode(preferredUsername, forKey: .preferredUsername)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(lastFetchDate, forKey: .lastFetchDate)
        try container.encode(domain, forKey: .domain)
        try container.encodeIfPresent(type, forKey: .type)
        try container.encodeIfPresent(manuallyApprovesFollowers, forKey: .manuallyApprovesFollowers)
    }
}

}
