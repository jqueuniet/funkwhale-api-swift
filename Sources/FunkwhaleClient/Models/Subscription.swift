//
// Subscription.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

@available(*, deprecated, renamed: "FunkwhaleClientAPI.Subscription")
public typealias Subscription = FunkwhaleClientAPI.Subscription

extension FunkwhaleClientAPI {

public struct Subscription: Codable, JSONEncodable, Hashable {

    public var approved: Bool
    public var fid: String
    public var uuid: UUID
    public var creationDate: Date

    public init(approved: Bool, fid: String, uuid: UUID, creationDate: Date) {
        self.approved = approved
        self.fid = fid
        self.uuid = uuid
        self.creationDate = creationDate
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case approved
        case fid
        case uuid
        case creationDate = "creation_date"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(approved, forKey: .approved)
        try container.encode(fid, forKey: .fid)
        try container.encode(uuid, forKey: .uuid)
        try container.encode(creationDate, forKey: .creationDate)
    }
}

}
