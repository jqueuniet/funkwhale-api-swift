//
// RadioSessionRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

@available(*, deprecated, renamed: "FunkwhaleClientAPI.RadioSessionRequest")
public typealias RadioSessionRequest = FunkwhaleClientAPI.RadioSessionRequest

extension FunkwhaleClientAPI {

public struct RadioSessionRequest: Codable, JSONEncodable, Hashable {

    static let radioTypeRule = StringRule(minLength: 1, maxLength: 50, pattern: nil)
    static let relatedObjectIdRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    public var radioType: String
    public var relatedObjectId: String?
    public var user: Int?
    public var creationDate: Date?
    public var customRadio: Int?
    public var config: [String: AnyCodable]?

    public init(radioType: String, relatedObjectId: String? = nil, user: Int? = nil, creationDate: Date? = nil, customRadio: Int? = nil, config: [String: AnyCodable]? = nil) {
        self.radioType = radioType
        self.relatedObjectId = relatedObjectId
        self.user = user
        self.creationDate = creationDate
        self.customRadio = customRadio
        self.config = config
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case radioType = "radio_type"
        case relatedObjectId = "related_object_id"
        case user
        case creationDate = "creation_date"
        case customRadio = "custom_radio"
        case config
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(radioType, forKey: .radioType)
        try container.encodeIfPresent(relatedObjectId, forKey: .relatedObjectId)
        try container.encodeIfPresent(user, forKey: .user)
        try container.encodeIfPresent(creationDate, forKey: .creationDate)
        try container.encodeIfPresent(customRadio, forKey: .customRadio)
        try container.encodeIfPresent(config, forKey: .config)
    }
}

}
