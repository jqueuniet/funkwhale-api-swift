//
// SimpleChannelArtistRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

@available(*, deprecated, renamed: "FunkwhaleClientAPI.SimpleChannelArtistRequest")
public typealias SimpleChannelArtistRequest = FunkwhaleClientAPI.SimpleChannelArtistRequest

extension FunkwhaleClientAPI {

public struct SimpleChannelArtistRequest: Codable, JSONEncodable, Hashable {

    static let fidRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    static let mbidRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    static let nameRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    static let contentCategoryRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    public var id: Int
    public var fid: String
    public var mbid: String
    public var name: String
    public var creationDate: Date
    public var modificationDate: Date
    public var isLocal: Bool
    public var contentCategory: String
    public var description: ContentRequest?
    public var cover: CoverFieldRequest?
    public var channel: UUID?
    public var tracksCount: Int?
    public var tags: [String]?

    public init(id: Int, fid: String, mbid: String, name: String, creationDate: Date, modificationDate: Date, isLocal: Bool, contentCategory: String, description: ContentRequest? = nil, cover: CoverFieldRequest? = nil, channel: UUID? = nil, tracksCount: Int? = nil, tags: [String]? = nil) {
        self.id = id
        self.fid = fid
        self.mbid = mbid
        self.name = name
        self.creationDate = creationDate
        self.modificationDate = modificationDate
        self.isLocal = isLocal
        self.contentCategory = contentCategory
        self.description = description
        self.cover = cover
        self.channel = channel
        self.tracksCount = tracksCount
        self.tags = tags
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case fid
        case mbid
        case name
        case creationDate = "creation_date"
        case modificationDate = "modification_date"
        case isLocal = "is_local"
        case contentCategory = "content_category"
        case description
        case cover
        case channel
        case tracksCount = "tracks_count"
        case tags
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encode(fid, forKey: .fid)
        try container.encode(mbid, forKey: .mbid)
        try container.encode(name, forKey: .name)
        try container.encode(creationDate, forKey: .creationDate)
        try container.encode(modificationDate, forKey: .modificationDate)
        try container.encode(isLocal, forKey: .isLocal)
        try container.encode(contentCategory, forKey: .contentCategory)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(cover, forKey: .cover)
        try container.encodeIfPresent(channel, forKey: .channel)
        try container.encodeIfPresent(tracksCount, forKey: .tracksCount)
        try container.encodeIfPresent(tags, forKey: .tags)
    }
}

}
