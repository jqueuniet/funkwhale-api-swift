//
// Application.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

@available(*, deprecated, renamed: "FunkwhaleClientAPI.Application")
public typealias Application = FunkwhaleClientAPI.Application

extension FunkwhaleClientAPI {

public struct Application: Codable, JSONEncodable, Hashable {

    static let clientIdRule = StringRule(minLength: nil, maxLength: 100, pattern: nil)
    static let nameRule = StringRule(minLength: nil, maxLength: 255, pattern: nil)
    public var clientId: String?
    public var name: String?
    public var scopes: String
    public var created: Date
    public var updated: Date

    public init(clientId: String? = nil, name: String? = nil, scopes: String, created: Date, updated: Date) {
        self.clientId = clientId
        self.name = name
        self.scopes = scopes
        self.created = created
        self.updated = updated
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case clientId = "client_id"
        case name
        case scopes
        case created
        case updated
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(clientId, forKey: .clientId)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encode(scopes, forKey: .scopes)
        try container.encode(created, forKey: .created)
        try container.encode(updated, forKey: .updated)
    }
}

}
