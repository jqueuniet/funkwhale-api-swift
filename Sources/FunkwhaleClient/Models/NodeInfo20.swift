//
// NodeInfo20.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

@available(*, deprecated, renamed: "FunkwhaleClientAPI.NodeInfo20")
public typealias NodeInfo20 = FunkwhaleClientAPI.NodeInfo20

extension FunkwhaleClientAPI {

public struct NodeInfo20: Codable, JSONEncodable, Hashable {

    public var version: String
    public var software: Software
    public var protocols: [AnyCodable]
    public var services: Services?
    public var openRegistrations: Bool
    public var usage: Usage
    public var metadata: Metadata20

    public init(version: String, software: Software, protocols: [AnyCodable], services: Services? = nil, openRegistrations: Bool, usage: Usage, metadata: Metadata20) {
        self.version = version
        self.software = software
        self.protocols = protocols
        self.services = services
        self.openRegistrations = openRegistrations
        self.usage = usage
        self.metadata = metadata
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case version
        case software
        case protocols
        case services
        case openRegistrations
        case usage
        case metadata
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(version, forKey: .version)
        try container.encode(software, forKey: .software)
        try container.encode(protocols, forKey: .protocols)
        try container.encodeIfPresent(services, forKey: .services)
        try container.encode(openRegistrations, forKey: .openRegistrations)
        try container.encode(usage, forKey: .usage)
        try container.encode(metadata, forKey: .metadata)
    }
}

}
