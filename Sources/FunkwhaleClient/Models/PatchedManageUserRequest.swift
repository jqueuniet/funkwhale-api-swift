//
// PatchedManageUserRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

@available(*, deprecated, renamed: "FunkwhaleClientAPI.PatchedManageUserRequest")
public typealias PatchedManageUserRequest = FunkwhaleClientAPI.PatchedManageUserRequest

extension FunkwhaleClientAPI {

public struct PatchedManageUserRequest: Codable, JSONEncodable, Hashable {

    static let nameRule = StringRule(minLength: nil, maxLength: 255, pattern: nil)
    public var name: String?
    /** Designates whether this user should be treated as active. Unselect this instead of deleting accounts. */
    public var isActive: Bool?
    /** Designates whether the user can log into this admin site. */
    public var isStaff: Bool?
    /** Designates that this user has all permissions without explicitly assigning them. */
    public var isSuperuser: Bool?
    public var uploadQuota: Int?

    public init(name: String? = nil, isActive: Bool? = nil, isStaff: Bool? = nil, isSuperuser: Bool? = nil, uploadQuota: Int? = nil) {
        self.name = name
        self.isActive = isActive
        self.isStaff = isStaff
        self.isSuperuser = isSuperuser
        self.uploadQuota = uploadQuota
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case name
        case isActive = "is_active"
        case isStaff = "is_staff"
        case isSuperuser = "is_superuser"
        case uploadQuota = "upload_quota"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(isActive, forKey: .isActive)
        try container.encodeIfPresent(isStaff, forKey: .isStaff)
        try container.encodeIfPresent(isSuperuser, forKey: .isSuperuser)
        try container.encodeIfPresent(uploadQuota, forKey: .uploadQuota)
    }
}

}
