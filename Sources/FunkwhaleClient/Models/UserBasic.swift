//
// UserBasic.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

@available(*, deprecated, renamed: "FunkwhaleClientAPI.UserBasic")
public typealias UserBasic = FunkwhaleClientAPI.UserBasic

extension FunkwhaleClientAPI {

public struct UserBasic: Codable, JSONEncodable, Hashable {

    static let usernameRule = StringRule(minLength: nil, maxLength: 150, pattern: "/^[\\w.@+-]+$/")
    static let nameRule = StringRule(minLength: nil, maxLength: 255, pattern: nil)
    public var id: Int
    /** Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only. */
    public var username: String
    public var name: String?
    public var dateJoined: Date?
    public var avatar: Attachment?

    public init(id: Int, username: String, name: String? = nil, dateJoined: Date? = nil, avatar: Attachment?) {
        self.id = id
        self.username = username
        self.name = name
        self.dateJoined = dateJoined
        self.avatar = avatar
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case username
        case name
        case dateJoined = "date_joined"
        case avatar
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encode(username, forKey: .username)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(dateJoined, forKey: .dateJoined)
        try container.encode(avatar, forKey: .avatar)
    }
}

}
