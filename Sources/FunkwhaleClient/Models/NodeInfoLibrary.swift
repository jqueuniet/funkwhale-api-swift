//
// NodeInfoLibrary.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

@available(*, deprecated, renamed: "FunkwhaleClientAPI.NodeInfoLibrary")
public typealias NodeInfoLibrary = FunkwhaleClientAPI.NodeInfoLibrary

extension FunkwhaleClientAPI {

public struct NodeInfoLibrary: Codable, JSONEncodable, Hashable {

    public var federationEnabled: Bool
    public var anonymousCanListen: Bool
    public var tracks: NodeInfoLibraryTracks?
    public var artists: NodeInfoLibraryTracks?
    public var albums: NodeInfoLibraryTracks?
    public var music: NodeInfoLibraryMusic?

    public init(federationEnabled: Bool, anonymousCanListen: Bool, tracks: NodeInfoLibraryTracks? = nil, artists: NodeInfoLibraryTracks? = nil, albums: NodeInfoLibraryTracks? = nil, music: NodeInfoLibraryMusic? = nil) {
        self.federationEnabled = federationEnabled
        self.anonymousCanListen = anonymousCanListen
        self.tracks = tracks
        self.artists = artists
        self.albums = albums
        self.music = music
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case federationEnabled
        case anonymousCanListen
        case tracks
        case artists
        case albums
        case music
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(federationEnabled, forKey: .federationEnabled)
        try container.encode(anonymousCanListen, forKey: .anonymousCanListen)
        try container.encodeIfPresent(tracks, forKey: .tracks)
        try container.encodeIfPresent(artists, forKey: .artists)
        try container.encodeIfPresent(albums, forKey: .albums)
        try container.encodeIfPresent(music, forKey: .music)
    }
}

}
