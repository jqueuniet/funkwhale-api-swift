//
// ManageTrackAlbum.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

@available(*, deprecated, renamed: "FunkwhaleClientAPI.ManageTrackAlbum")
public typealias ManageTrackAlbum = FunkwhaleClientAPI.ManageTrackAlbum

extension FunkwhaleClientAPI {

public struct ManageTrackAlbum: Codable, JSONEncodable, Hashable {

    static let fidRule = StringRule(minLength: nil, maxLength: 500, pattern: nil)
    public var id: Int
    public var fid: String?
    public var mbid: UUID?
    public var title: String
    public var creationDate: Date?
    public var releaseDate: Date?
    public var cover: CoverField
    public var domain: String
    public var isLocal: Bool
    public var tracksCount: Int
    public var artist: ManageNestedArtist

    public init(id: Int, fid: String? = nil, mbid: UUID? = nil, title: String, creationDate: Date? = nil, releaseDate: Date? = nil, cover: CoverField, domain: String, isLocal: Bool, tracksCount: Int, artist: ManageNestedArtist) {
        self.id = id
        self.fid = fid
        self.mbid = mbid
        self.title = title
        self.creationDate = creationDate
        self.releaseDate = releaseDate
        self.cover = cover
        self.domain = domain
        self.isLocal = isLocal
        self.tracksCount = tracksCount
        self.artist = artist
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case fid
        case mbid
        case title
        case creationDate = "creation_date"
        case releaseDate = "release_date"
        case cover
        case domain
        case isLocal = "is_local"
        case tracksCount = "tracks_count"
        case artist
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encodeIfPresent(fid, forKey: .fid)
        try container.encodeIfPresent(mbid, forKey: .mbid)
        try container.encode(title, forKey: .title)
        try container.encodeIfPresent(creationDate, forKey: .creationDate)
        try container.encodeIfPresent(releaseDate, forKey: .releaseDate)
        try container.encode(cover, forKey: .cover)
        try container.encode(domain, forKey: .domain)
        try container.encode(isLocal, forKey: .isLocal)
        try container.encode(tracksCount, forKey: .tracksCount)
        try container.encode(artist, forKey: .artist)
    }
}

}
