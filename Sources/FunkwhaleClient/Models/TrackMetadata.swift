//
// TrackMetadata.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

@available(*, deprecated, renamed: "FunkwhaleClientAPI.TrackMetadata")
public typealias TrackMetadata = FunkwhaleClientAPI.TrackMetadata

extension FunkwhaleClientAPI {

public struct TrackMetadata: Codable, JSONEncodable, Hashable {

    public var title: String?
    public var position: String?
    public var discNumber: String?
    public var copyright: String?
    public var license: String?
    public var mbid: UUID?
    public var tags: String?
    public var description: String?
    public var album: String
    public var artists: String
    public var coverData: String?

    public init(title: String? = nil, position: String? = nil, discNumber: String? = nil, copyright: String? = nil, license: String? = nil, mbid: UUID? = nil, tags: String? = nil, description: String? = nil, album: String, artists: String, coverData: String? = nil) {
        self.title = title
        self.position = position
        self.discNumber = discNumber
        self.copyright = copyright
        self.license = license
        self.mbid = mbid
        self.tags = tags
        self.description = description
        self.album = album
        self.artists = artists
        self.coverData = coverData
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case title
        case position
        case discNumber = "disc_number"
        case copyright
        case license
        case mbid
        case tags
        case description
        case album
        case artists
        case coverData = "cover_data"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(title, forKey: .title)
        try container.encodeIfPresent(position, forKey: .position)
        try container.encodeIfPresent(discNumber, forKey: .discNumber)
        try container.encodeIfPresent(copyright, forKey: .copyright)
        try container.encodeIfPresent(license, forKey: .license)
        try container.encodeIfPresent(mbid, forKey: .mbid)
        try container.encodeIfPresent(tags, forKey: .tags)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encode(album, forKey: .album)
        try container.encode(artists, forKey: .artists)
        try container.encodeIfPresent(coverData, forKey: .coverData)
    }
}

}
