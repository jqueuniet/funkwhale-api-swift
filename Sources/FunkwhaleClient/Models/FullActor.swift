//
// FullActor.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

@available(*, deprecated, renamed: "FunkwhaleClientAPI.FullActor")
public typealias FullActor = FunkwhaleClientAPI.FullActor

extension FunkwhaleClientAPI {

public struct FullActor: Codable, JSONEncodable, Hashable {

    public var fid: String
    public var url: String
    public var domain: String
    public var creationDate: Date
    public var lastFetchDate: Date
    public var name: String
    public var preferredUsername: String
    public var fullUsername: String
    public var type: String
    public var isLocal: Bool
    public var isChannel: Bool
    public var manuallyApprovesFollowers: Bool
    public var user: UserBasic
    public var summary: Content
    public var icon: Attachment

    public init(fid: String, url: String, domain: String, creationDate: Date, lastFetchDate: Date, name: String, preferredUsername: String, fullUsername: String, type: String, isLocal: Bool, isChannel: Bool, manuallyApprovesFollowers: Bool, user: UserBasic, summary: Content, icon: Attachment) {
        self.fid = fid
        self.url = url
        self.domain = domain
        self.creationDate = creationDate
        self.lastFetchDate = lastFetchDate
        self.name = name
        self.preferredUsername = preferredUsername
        self.fullUsername = fullUsername
        self.type = type
        self.isLocal = isLocal
        self.isChannel = isChannel
        self.manuallyApprovesFollowers = manuallyApprovesFollowers
        self.user = user
        self.summary = summary
        self.icon = icon
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case fid
        case url
        case domain
        case creationDate = "creation_date"
        case lastFetchDate = "last_fetch_date"
        case name
        case preferredUsername = "preferred_username"
        case fullUsername = "full_username"
        case type
        case isLocal = "is_local"
        case isChannel = "is_channel"
        case manuallyApprovesFollowers = "manually_approves_followers"
        case user
        case summary
        case icon
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(fid, forKey: .fid)
        try container.encode(url, forKey: .url)
        try container.encode(domain, forKey: .domain)
        try container.encode(creationDate, forKey: .creationDate)
        try container.encode(lastFetchDate, forKey: .lastFetchDate)
        try container.encode(name, forKey: .name)
        try container.encode(preferredUsername, forKey: .preferredUsername)
        try container.encode(fullUsername, forKey: .fullUsername)
        try container.encode(type, forKey: .type)
        try container.encode(isLocal, forKey: .isLocal)
        try container.encode(isChannel, forKey: .isChannel)
        try container.encode(manuallyApprovesFollowers, forKey: .manuallyApprovesFollowers)
        try container.encode(user, forKey: .user)
        try container.encode(summary, forKey: .summary)
        try container.encode(icon, forKey: .icon)
    }
}

}
