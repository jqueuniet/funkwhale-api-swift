//
// TrackRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

@available(*, deprecated, renamed: "FunkwhaleClientAPI.TrackRequest")
public typealias TrackRequest = FunkwhaleClientAPI.TrackRequest

extension FunkwhaleClientAPI {

public struct TrackRequest: Codable, JSONEncodable, Hashable {

    static let fidRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    static let titleRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    static let copyrightRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    public var artist: SimpleArtistRequest
    public var attributedTo: APIActorRequest?
    public var id: Int
    public var fid: String
    public var mbid: UUID
    public var title: String
    public var creationDate: Date
    public var isLocal: Bool
    public var position: Int
    public var discNumber: Int
    public var downloadsCount: Int
    public var copyright: String
    public var cover: CoverFieldRequest?

    public init(artist: SimpleArtistRequest, attributedTo: APIActorRequest?, id: Int, fid: String, mbid: UUID, title: String, creationDate: Date, isLocal: Bool, position: Int, discNumber: Int, downloadsCount: Int, copyright: String, cover: CoverFieldRequest?) {
        self.artist = artist
        self.attributedTo = attributedTo
        self.id = id
        self.fid = fid
        self.mbid = mbid
        self.title = title
        self.creationDate = creationDate
        self.isLocal = isLocal
        self.position = position
        self.discNumber = discNumber
        self.downloadsCount = downloadsCount
        self.copyright = copyright
        self.cover = cover
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case artist
        case attributedTo = "attributed_to"
        case id
        case fid
        case mbid
        case title
        case creationDate = "creation_date"
        case isLocal = "is_local"
        case position
        case discNumber = "disc_number"
        case downloadsCount = "downloads_count"
        case copyright
        case cover
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(artist, forKey: .artist)
        try container.encode(attributedTo, forKey: .attributedTo)
        try container.encode(id, forKey: .id)
        try container.encode(fid, forKey: .fid)
        try container.encode(mbid, forKey: .mbid)
        try container.encode(title, forKey: .title)
        try container.encode(creationDate, forKey: .creationDate)
        try container.encode(isLocal, forKey: .isLocal)
        try container.encode(position, forKey: .position)
        try container.encode(discNumber, forKey: .discNumber)
        try container.encode(downloadsCount, forKey: .downloadsCount)
        try container.encode(copyright, forKey: .copyright)
        try container.encode(cover, forKey: .cover)
    }
}

}
