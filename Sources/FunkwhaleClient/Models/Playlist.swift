//
// Playlist.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

@available(*, deprecated, renamed: "FunkwhaleClientAPI.Playlist")
public typealias Playlist = FunkwhaleClientAPI.Playlist

extension FunkwhaleClientAPI {

public struct Playlist: Codable, JSONEncodable, Hashable {

    static let nameRule = StringRule(minLength: nil, maxLength: 50, pattern: nil)
    public var id: Int
    public var name: String
    public var user: UserBasic
    public var modificationDate: Date
    public var creationDate: Date
    public var privacyLevel: PrivacyLevelEnum?
    public var tracksCount: Int
    public var albumCovers: [String]
    public var duration: Int
    public var isPlayable: Bool
    public var actor: APIActor

    public init(id: Int, name: String, user: UserBasic, modificationDate: Date, creationDate: Date, privacyLevel: PrivacyLevelEnum? = nil, tracksCount: Int, albumCovers: [String], duration: Int, isPlayable: Bool, actor: APIActor) {
        self.id = id
        self.name = name
        self.user = user
        self.modificationDate = modificationDate
        self.creationDate = creationDate
        self.privacyLevel = privacyLevel
        self.tracksCount = tracksCount
        self.albumCovers = albumCovers
        self.duration = duration
        self.isPlayable = isPlayable
        self.actor = actor
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case name
        case user
        case modificationDate = "modification_date"
        case creationDate = "creation_date"
        case privacyLevel = "privacy_level"
        case tracksCount = "tracks_count"
        case albumCovers = "album_covers"
        case duration
        case isPlayable = "is_playable"
        case actor
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encode(name, forKey: .name)
        try container.encode(user, forKey: .user)
        try container.encode(modificationDate, forKey: .modificationDate)
        try container.encode(creationDate, forKey: .creationDate)
        try container.encodeIfPresent(privacyLevel, forKey: .privacyLevel)
        try container.encode(tracksCount, forKey: .tracksCount)
        try container.encode(albumCovers, forKey: .albumCovers)
        try container.encode(duration, forKey: .duration)
        try container.encode(isPlayable, forKey: .isPlayable)
        try container.encode(actor, forKey: .actor)
    }
}

}
