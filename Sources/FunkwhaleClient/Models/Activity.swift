//
// Activity.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

@available(*, deprecated, renamed: "FunkwhaleClientAPI.Activity")
public typealias Activity = FunkwhaleClientAPI.Activity

extension FunkwhaleClientAPI {

public struct Activity: Codable, JSONEncodable, Hashable {

    static let fidRule = StringRule(minLength: nil, maxLength: 500, pattern: nil)
    static let typeRule = StringRule(minLength: nil, maxLength: 100, pattern: nil)
    public var uuid: UUID?
    public var fid: String?
    public var actor: APIActor
    public var payload: [String: AnyCodable]?
    public var object: [String: AnyCodable]?
    public var target: [String: AnyCodable]?
    public var relatedObject: [String: AnyCodable]
    public var creationDate: Date?
    public var type: String?

    public init(uuid: UUID? = nil, fid: String? = nil, actor: APIActor, payload: [String: AnyCodable]? = nil, object: [String: AnyCodable]?, target: [String: AnyCodable]?, relatedObject: [String: AnyCodable], creationDate: Date? = nil, type: String? = nil) {
        self.uuid = uuid
        self.fid = fid
        self.actor = actor
        self.payload = payload
        self.object = object
        self.target = target
        self.relatedObject = relatedObject
        self.creationDate = creationDate
        self.type = type
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case uuid
        case fid
        case actor
        case payload
        case object
        case target
        case relatedObject = "related_object"
        case creationDate = "creation_date"
        case type
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(uuid, forKey: .uuid)
        try container.encodeIfPresent(fid, forKey: .fid)
        try container.encode(actor, forKey: .actor)
        try container.encodeIfPresent(payload, forKey: .payload)
        try container.encode(object, forKey: .object)
        try container.encode(target, forKey: .target)
        try container.encode(relatedObject, forKey: .relatedObject)
        try container.encodeIfPresent(creationDate, forKey: .creationDate)
        try container.encodeIfPresent(type, forKey: .type)
    }
}

}
