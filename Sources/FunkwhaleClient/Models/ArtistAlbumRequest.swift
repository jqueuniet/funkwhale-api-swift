//
// ArtistAlbumRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

@available(*, deprecated, renamed: "FunkwhaleClientAPI.ArtistAlbumRequest")
public typealias ArtistAlbumRequest = FunkwhaleClientAPI.ArtistAlbumRequest

extension FunkwhaleClientAPI {

public struct ArtistAlbumRequest: Codable, JSONEncodable, Hashable {

    static let fidRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    static let titleRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    public var cover: CoverFieldRequest?
    public var isLocal: Bool
    public var id: Int
    public var fid: String
    public var mbid: UUID
    public var title: String
    public var releaseDate: Date
    public var creationDate: Date

    public init(cover: CoverFieldRequest?, isLocal: Bool, id: Int, fid: String, mbid: UUID, title: String, releaseDate: Date, creationDate: Date) {
        self.cover = cover
        self.isLocal = isLocal
        self.id = id
        self.fid = fid
        self.mbid = mbid
        self.title = title
        self.releaseDate = releaseDate
        self.creationDate = creationDate
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case cover
        case isLocal = "is_local"
        case id
        case fid
        case mbid
        case title
        case releaseDate = "release_date"
        case creationDate = "creation_date"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(cover, forKey: .cover)
        try container.encode(isLocal, forKey: .isLocal)
        try container.encode(id, forKey: .id)
        try container.encode(fid, forKey: .fid)
        try container.encode(mbid, forKey: .mbid)
        try container.encode(title, forKey: .title)
        try container.encode(releaseDate, forKey: .releaseDate)
        try container.encode(creationDate, forKey: .creationDate)
    }
}

}
