//
// ManageInvitation.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

@available(*, deprecated, renamed: "FunkwhaleClientAPI.ManageInvitation")
public typealias ManageInvitation = FunkwhaleClientAPI.ManageInvitation

extension FunkwhaleClientAPI {

public struct ManageInvitation: Codable, JSONEncodable, Hashable {

    public var id: Int
    public var owner: ManageUserSimple?
    public var invitedUser: ManageUserSimple?
    public var code: String?
    public var expirationDate: Date
    public var creationDate: Date
    public var users: [ManageUserSimple]?

    public init(id: Int, owner: ManageUserSimple? = nil, invitedUser: ManageUserSimple? = nil, code: String? = nil, expirationDate: Date, creationDate: Date, users: [ManageUserSimple]? = nil) {
        self.id = id
        self.owner = owner
        self.invitedUser = invitedUser
        self.code = code
        self.expirationDate = expirationDate
        self.creationDate = creationDate
        self.users = users
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case owner
        case invitedUser = "invited_user"
        case code
        case expirationDate = "expiration_date"
        case creationDate = "creation_date"
        case users
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encodeIfPresent(owner, forKey: .owner)
        try container.encodeIfPresent(invitedUser, forKey: .invitedUser)
        try container.encodeIfPresent(code, forKey: .code)
        try container.encode(expirationDate, forKey: .expirationDate)
        try container.encode(creationDate, forKey: .creationDate)
        try container.encodeIfPresent(users, forKey: .users)
    }
}

}
