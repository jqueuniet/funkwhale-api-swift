//
// ManageNestedLibrary.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

@available(*, deprecated, renamed: "FunkwhaleClientAPI.ManageNestedLibrary")
public typealias ManageNestedLibrary = FunkwhaleClientAPI.ManageNestedLibrary

extension FunkwhaleClientAPI {

public struct ManageNestedLibrary: Codable, JSONEncodable, Hashable {

    static let fidRule = StringRule(minLength: nil, maxLength: 500, pattern: nil)
    static let urlRule = StringRule(minLength: nil, maxLength: 500, pattern: nil)
    static let nameRule = StringRule(minLength: nil, maxLength: 100, pattern: nil)
    static let descriptionRule = StringRule(minLength: nil, maxLength: 5000, pattern: nil)
    static let followersUrlRule = StringRule(minLength: nil, maxLength: 500, pattern: nil)
    public var id: Int
    public var uuid: UUID?
    public var fid: String
    public var url: String?
    public var name: String
    public var description: String?
    public var domain: String
    public var isLocal: Bool
    public var creationDate: Date?
    public var privacyLevel: LibraryPrivacyLevelEnum?
    public var followersUrl: String
    public var actor: ManageBaseActor

    public init(id: Int, uuid: UUID? = nil, fid: String, url: String? = nil, name: String, description: String? = nil, domain: String, isLocal: Bool, creationDate: Date? = nil, privacyLevel: LibraryPrivacyLevelEnum? = nil, followersUrl: String, actor: ManageBaseActor) {
        self.id = id
        self.uuid = uuid
        self.fid = fid
        self.url = url
        self.name = name
        self.description = description
        self.domain = domain
        self.isLocal = isLocal
        self.creationDate = creationDate
        self.privacyLevel = privacyLevel
        self.followersUrl = followersUrl
        self.actor = actor
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case uuid
        case fid
        case url
        case name
        case description
        case domain
        case isLocal = "is_local"
        case creationDate = "creation_date"
        case privacyLevel = "privacy_level"
        case followersUrl = "followers_url"
        case actor
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encodeIfPresent(uuid, forKey: .uuid)
        try container.encode(fid, forKey: .fid)
        try container.encodeIfPresent(url, forKey: .url)
        try container.encode(name, forKey: .name)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encode(domain, forKey: .domain)
        try container.encode(isLocal, forKey: .isLocal)
        try container.encodeIfPresent(creationDate, forKey: .creationDate)
        try container.encodeIfPresent(privacyLevel, forKey: .privacyLevel)
        try container.encode(followersUrl, forKey: .followersUrl)
        try container.encode(actor, forKey: .actor)
    }
}

}
