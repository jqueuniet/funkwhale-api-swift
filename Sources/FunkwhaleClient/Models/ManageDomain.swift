//
// ManageDomain.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

@available(*, deprecated, renamed: "FunkwhaleClientAPI.ManageDomain")
public typealias ManageDomain = FunkwhaleClientAPI.ManageDomain

extension FunkwhaleClientAPI {

public struct ManageDomain: Codable, JSONEncodable, Hashable {

    static let nameRule = StringRule(minLength: nil, maxLength: 255, pattern: nil)
    public var name: String
    public var creationDate: Date
    public var actorsCount: Int
    public var outboxActivitiesCount: Int
    public var nodeinfo: [String: AnyCodable]
    public var nodeinfoFetchDate: Date?
    public var instancePolicy: Int
    public var allowed: Bool?

    public init(name: String, creationDate: Date, actorsCount: Int, outboxActivitiesCount: Int, nodeinfo: [String: AnyCodable], nodeinfoFetchDate: Date?, instancePolicy: Int, allowed: Bool? = nil) {
        self.name = name
        self.creationDate = creationDate
        self.actorsCount = actorsCount
        self.outboxActivitiesCount = outboxActivitiesCount
        self.nodeinfo = nodeinfo
        self.nodeinfoFetchDate = nodeinfoFetchDate
        self.instancePolicy = instancePolicy
        self.allowed = allowed
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case name
        case creationDate = "creation_date"
        case actorsCount = "actors_count"
        case outboxActivitiesCount = "outbox_activities_count"
        case nodeinfo
        case nodeinfoFetchDate = "nodeinfo_fetch_date"
        case instancePolicy = "instance_policy"
        case allowed
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(name, forKey: .name)
        try container.encode(creationDate, forKey: .creationDate)
        try container.encode(actorsCount, forKey: .actorsCount)
        try container.encode(outboxActivitiesCount, forKey: .outboxActivitiesCount)
        try container.encode(nodeinfo, forKey: .nodeinfo)
        try container.encode(nodeinfoFetchDate, forKey: .nodeinfoFetchDate)
        try container.encode(instancePolicy, forKey: .instancePolicy)
        try container.encodeIfPresent(allowed, forKey: .allowed)
    }
}

}
