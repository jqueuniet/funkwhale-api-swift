//
// RegisterRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

@available(*, deprecated, renamed: "FunkwhaleClientAPI.RegisterRequest")
public typealias RegisterRequest = FunkwhaleClientAPI.RegisterRequest

extension FunkwhaleClientAPI {

public struct RegisterRequest: Codable, JSONEncodable, Hashable {

    static let usernameRule = StringRule(minLength: 1, maxLength: 150, pattern: nil)
    static let emailRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    static let password1Rule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    static let password2Rule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    public var username: String
    public var email: String
    public var password1: String
    public var password2: String
    public var invitation: String?

    public init(username: String, email: String, password1: String, password2: String, invitation: String? = nil) {
        self.username = username
        self.email = email
        self.password1 = password1
        self.password2 = password2
        self.invitation = invitation
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case username
        case email
        case password1
        case password2
        case invitation
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(username, forKey: .username)
        try container.encode(email, forKey: .email)
        try container.encode(password1, forKey: .password1)
        try container.encode(password2, forKey: .password2)
        try container.encodeIfPresent(invitation, forKey: .invitation)
    }
}

}
