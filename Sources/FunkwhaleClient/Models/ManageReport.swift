//
// ManageReport.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

@available(*, deprecated, renamed: "FunkwhaleClientAPI.ManageReport")
public typealias ManageReport = FunkwhaleClientAPI.ManageReport

extension FunkwhaleClientAPI {

public struct ManageReport: Codable, JSONEncodable, Hashable {

    public var id: Int
    public var uuid: UUID
    public var fid: String
    public var creationDate: Date
    public var handledDate: Date?
    public var summary: String?
    public var type: ReportTypeEnum
    public var target: [String: AnyCodable]
    public var targetState: [String: AnyCodable]?
    public var isHandled: Bool?
    public var assignedTo: ManageBaseActor?
    public var targetOwner: ManageBaseActor?
    public var submitter: ManageBaseActor?
    public var submitterEmail: String?
    public var notes: [ManageBaseNote]?

    public init(id: Int, uuid: UUID, fid: String, creationDate: Date, handledDate: Date?, summary: String?, type: ReportTypeEnum, target: [String: AnyCodable], targetState: [String: AnyCodable]?, isHandled: Bool? = nil, assignedTo: ManageBaseActor? = nil, targetOwner: ManageBaseActor? = nil, submitter: ManageBaseActor? = nil, submitterEmail: String?, notes: [ManageBaseNote]? = nil) {
        self.id = id
        self.uuid = uuid
        self.fid = fid
        self.creationDate = creationDate
        self.handledDate = handledDate
        self.summary = summary
        self.type = type
        self.target = target
        self.targetState = targetState
        self.isHandled = isHandled
        self.assignedTo = assignedTo
        self.targetOwner = targetOwner
        self.submitter = submitter
        self.submitterEmail = submitterEmail
        self.notes = notes
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case uuid
        case fid
        case creationDate = "creation_date"
        case handledDate = "handled_date"
        case summary
        case type
        case target
        case targetState = "target_state"
        case isHandled = "is_handled"
        case assignedTo = "assigned_to"
        case targetOwner = "target_owner"
        case submitter
        case submitterEmail = "submitter_email"
        case notes
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encode(uuid, forKey: .uuid)
        try container.encode(fid, forKey: .fid)
        try container.encode(creationDate, forKey: .creationDate)
        try container.encode(handledDate, forKey: .handledDate)
        try container.encode(summary, forKey: .summary)
        try container.encode(type, forKey: .type)
        try container.encode(target, forKey: .target)
        try container.encode(targetState, forKey: .targetState)
        try container.encodeIfPresent(isHandled, forKey: .isHandled)
        try container.encodeIfPresent(assignedTo, forKey: .assignedTo)
        try container.encodeIfPresent(targetOwner, forKey: .targetOwner)
        try container.encodeIfPresent(submitter, forKey: .submitter)
        try container.encode(submitterEmail, forKey: .submitterEmail)
        try container.encodeIfPresent(notes, forKey: .notes)
    }
}

}
