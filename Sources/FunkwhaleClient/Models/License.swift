//
// License.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

@available(*, deprecated, renamed: "FunkwhaleClientAPI.License")
public typealias License = FunkwhaleClientAPI.License

extension FunkwhaleClientAPI {

public struct License: Codable, JSONEncodable, Hashable {

    public var id: String
    public var url: String
    public var code: String
    public var name: String
    public var redistribute: Bool
    public var derivative: Bool
    public var commercial: Bool
    public var attribution: Bool
    public var copyleft: Bool

    public init(id: String, url: String, code: String, name: String, redistribute: Bool, derivative: Bool, commercial: Bool, attribution: Bool, copyleft: Bool) {
        self.id = id
        self.url = url
        self.code = code
        self.name = name
        self.redistribute = redistribute
        self.derivative = derivative
        self.commercial = commercial
        self.attribution = attribution
        self.copyleft = copyleft
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case url
        case code
        case name
        case redistribute
        case derivative
        case commercial
        case attribution
        case copyleft
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encode(url, forKey: .url)
        try container.encode(code, forKey: .code)
        try container.encode(name, forKey: .name)
        try container.encode(redistribute, forKey: .redistribute)
        try container.encode(derivative, forKey: .derivative)
        try container.encode(commercial, forKey: .commercial)
        try container.encode(attribution, forKey: .attribution)
        try container.encode(copyleft, forKey: .copyleft)
    }
}

}
